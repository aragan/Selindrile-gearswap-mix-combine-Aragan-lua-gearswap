--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- __________.__                                ________                          __               .__.__  __      __  .__    .__           _____.__.__              
-- \______   |  |   ____ _____    ______ ____   \______ \   ____     ____   _____/  |_    ____   __| _|___/  |_  _/  |_|  |__ |__| ______ _/ ____|__|  |   ____      
--  |     ___|  | _/ __ \\__  \  /  ____/ __ \   |    |  \ /  _ \   /    \ /  _ \   __\ _/ __ \ / __ ||  \   __\ \   __|  |  \|  |/  ___/ \   __\|  |  | _/ __ \     
--  |    |   |  |_\  ___/ / __ \_\___ \\  ___/   |    `   (  <_> ) |   |  (  <_> |  |   \  ___// /_/ ||  ||  |    |  | |   Y  |  |\___ \   |  |  |  |  |_\  ___/     
--  |____|   |____/\___  (____  /____  >\___  > /_______  /\____/  |___|  /\____/|__|    \___  \____ ||__||__|    |__| |___|  |__/____  >  |__|  |__|____/\___  > /\ 
--                     \/     \/     \/     \/          \/              \/                   \/     \/                      \/        \/                      \/  \/ 
--
--	Please do not edit this file!							Please do not edit this file!							Please do not edit this file!
--
--	Editing this file will cause you to be unable to use Github Desktop to update!
--
--	Any changes you wish to make in this file you should be able to make by overloading. That is Re-Defining the same variables or functions in another file, by copying and
--	pasting them to a file that is loaded after the original file, all of my library files, and then job files are loaded first.
--	The last files to load are the ones unique to you. User-Globals, Charactername-Globals, Charactername_Job_Gear, in that order, so these changes will take precedence.
--
--	You may wish to "hook" into existing functions, to add functionality without losing access to updates or fixes I make, for example, instead of copying and editing
--	status_change(), you can instead use the function user_status_change() in the same manner, which is called by status_change() if it exists, most of the important 
--  gearswap functions work like this in my files, and if it's unique to a specific job, user_job_status_change() would be appropriate instead.
--
--  Variables and tables can be easily redefined just by defining them in one of the later loaded files: autofood = 'Miso Ramen' for example.
--  States can be redefined as well: state.HybridMode:options('Normal','PDT') though most of these are already redefined in the gear files for editing there.
--	Commands can be added easily with: user_self_command(commandArgs, eventArgs) or user_job_self_command(commandArgs, eventArgs)
--
--	If you're not sure where is appropriate to copy and paste variables, tables and functions to make changes or add them:
--		User-Globals.lua - 			This file loads with all characters, all jobs, so it's ideal for settings and rules you want to be the same no matter what.
--		Charactername-Globals.lua -	This file loads with one character, all jobs, so it's ideal for gear settings that are usable on all jobs, but unique to this character.
--		Charactername_Job_Gear.lua-	This file loads only on one character, one job, so it's ideal for things that are specific only to that job and character.
--
--
--	If you still need help, feel free to contact me on discord or ask in my chat for help: https://discord.gg/ug6xtvQ
--  !Please do NOT message me in game about anything third party related, though you're welcome to message me there and ask me to talk on another medium.
--
--  Please do not edit this file!							Please do not edit this file!							Please do not edit this file!
-- __________.__                                ________                          __               .__.__  __      __  .__    .__           _____.__.__              
-- \______   |  |   ____ _____    ______ ____   \______ \   ____     ____   _____/  |_    ____   __| _|___/  |_  _/  |_|  |__ |__| ______ _/ ____|__|  |   ____      
--  |     ___|  | _/ __ \\__  \  /  ____/ __ \   |    |  \ /  _ \   /    \ /  _ \   __\ _/ __ \ / __ ||  \   __\ \   __|  |  \|  |/  ___/ \   __\|  |  | _/ __ \     
--  |    |   |  |_\  ___/ / __ \_\___ \\  ___/   |    `   (  <_> ) |   |  (  <_> |  |   \  ___// /_/ ||  ||  |    |  | |   Y  |  |\___ \   |  |  |  |  |_\  ___/     
--  |____|   |____/\___  (____  /____  >\___  > /_______  /\____/  |___|  /\____/|__|    \___  \____ ||__||__|    |__| |___|  |__/____  >  |__|  |__|____/\___  > /\ 
--                     \/     \/     \/     \/          \/              \/                   \/     \/                      \/        \/                      \/  \/ 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Setup functions for this job.  Generally should not be modified.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- Initialization function for this job.
function get_sets()
    -- Load and initialize the include file.
    include('Sel-Include.lua')

	organizer_items = {
		"Airmid's Gorget",
		"Grape Daifuku",
		"Moogle Amp.",
		"Pear Crepe",
		"Gyudon",
		"Reraiser",
		"Hi-Reraiser",
		"Vile Elixir",
		"Vile Elixir +1",
		"Miso Ramen",
		"Carbonara",
		"Silent Oil",
		"Salt Ramen",
		"Panacea",
		"Sublime Sushi",
		"Sublime Sushi 1+",
		"Prism Powder",
		"Antacid",
		"Icarus Wing",
		"Warp Cudgel",
		"Holy Water",
		"Sanjaku-Tenugui",
		"Shinobi-Tabi",
		"Shihei",
		"Remedy",
		"Emporox's Ring",
		"Red Curry Bun",
		"Instant Reraise",
		"Black Curry Bun",
		"Rolan. Daifuku",
		"Reraise Earring",}
end

function job_setup()

	state.Buff['Mana Wall'] = buffactive['Mana Wall'] or false
	state.Buff['Manafont'] = buffactive['Manafont'] or false
	state.Buff['Manawell'] = buffactive['Manawell'] or false
    state.Buff['Sublimation: Activated'] = buffactive['Sublimation: Activated'] or false

    LowTierNukes = S{'Stone', 'Water', 'Aero', 'Fire', 'Blizzard', 'Thunder',
        'Stone II', 'Water II', 'Aero II', 'Fire II', 'Blizzard II', 'Thunder II',
        'Stonega', 'Waterga', 'Aeroga', 'Firaga', 'Blizzaga', 'Thundaga'}
		
    AutoManawellSpells = S{'Impact'}
	AutoManawellOccultSpells = S{'Impact','Meteor','Thundaja','Blizzaja','Firaja','Thunder VI','Blizzard VI',}

	Elemental_Aja = S{'Stoneja', 'Waterja', 'Aeroja', 'Firaja', 'Blizzaja', 'Thundaja', 'Comet'}
	Elemental_Debuffs = S {'Shock', 'Rasp', 'Choke', 'Frost', 'Burn', 'Drown'}
    element_table = L{'Earth','Wind','Ice','Fire','Water','Lightning'}
	Absorb = S{'Absorb-STR', 'Absorb-DEX', 'Absorb-VIT', 'Absorb-AGI', 'Absorb-INT', 'Absorb-MND', 'Absorb-CHR', 'Absorb-Attri', 'Absorb-MaxAcc', 'Absorb-TP'}

	state.DeathMode = M{ 'Off', 'Single', 'Lock'}
	state.AutoManawell = M(true, 'Auto Manawell Mode')
	state.RecoverMode = M('35%', '60%', 'Always', 'Never')
    state.MagicBurst = M(false, 'Magic Burst')
	state.AutoEquipBurst = M(true)
    state.WeaponLock = M(false, 'Weapon Lock')
    state.RP = M(false, "Reinforcement Points Mode")
    state.HippoMode = M(false, "hippoMode")
	state.Stance = M{['description']='Stance','None','Ebullience'}
    state.ManaWallMode = M(true, "Mana Wall Mode")
    state.AutoAbsorttpaspirSpam = M(false,'Auto Absort tp aspir Spam Mode')

	autows = 'Myrkr'
	autofood = 'Pear Crepe'
	autonuke = 'Absorb-TP'

	init_job_states({"Capacity","AutoRuneMode","AutoNukeMode","AutoManawell","AutoWSMode","AutoShadowMode","AutoFoodMode","AutoStunMode","AutoDefenseMode","HippoMode","AutoMedicineMode"},{"AutoTrustMode","AutoBuffMode","Weapons","OffenseMode","WeaponskillMode","IdleMode","Passive","Stance","RuneElement","RecoverMode","ElementalMode","CastingMode","TreasureMode",})
end

-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for standard casting events.
-------------------------------------------------------------------------------------------------------------------
-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
-- Set eventArgs.useMidcastGear to true if we want midcast gear equipped on precast.

function job_filtered_action(spell, eventArgs)
    if not spell.interrupted then
        if spell.english == 'Sleep' or spell.english == 'Sleepga' then
            send_command('@timers c "'..spell.english..' ['..spell.target.name..']" 60 down spells/00220.png')
        elseif spell.english == 'Sleep II' or spell.english == 'Sleepga II' then
            send_command('@timers c "'..spell.english..' ['..spell.target.name..']" 90 down spells/00220.png')
		elseif spell.english == "Sleep II" then
            send_command('timers create "Sleep II ' ..tostring(spell.target.name).. ' ' ..(spell.target.index).. '" 90 down spells/00259.png')
		elseif spell.english == "Death" and state.DeathMode.value == 'Single' then
			state.DeathMode:reset()
			if state.DisplayMode.value then update_job_states()	end
        end
    end
	if state.ManaWallMode.value == true and (player.in_combat or being_attacked) and player.hpp < 75 then 
		windower.chat.input('/ja "Mana Wall" <me>')

	end
end

function job_filter_pretarget(spell, spellMap, eventArgs)

	local abil_recasts = windower.ffxi.get_ability_recasts()

	if spell.skill == 'Elemental Magic' and player.sub_job == 'SCH' and get_current_stratagem_count() > 0 then
		cast_delay(1.1)
		windower.chat.input('/ja "Ebullience" <me>')
		--windower.chat.input:schedule(1.1,'/ws "'..spell.english..'" '..spell.target.raw..'')
		windower.send_command:schedule((next_cast - os.clock()),'gs c delayedcast')
		tickdelay = os.clock() + 1.1
		add_to_chat(204, 'Stratagem Charges Available: ['..get_current_stratagem_count()..']~~~')
		send_command('@input /echo <recast=Stratagems>')
	end


		--[[
		if state.TabulaRasaMode.value and spell.skill == 'Elemental Magic' and buffactive['Tabula Rasa'] and not buffactive['Immanence'] and buffactive['Ebullience'] then
    cast_delay(1.1)
    windower.chat.input('/ja "Ebullience" <me>')
    tickdelay = os.clock() + 1.1
    end
		    if spell.skill == 'Elemental Magic' and not buffactive['Immanence'] then
		eventArgs.cancel = true
		windower.chat.input('/ja "Ebullience" <me>')
		windower.chat.input:schedule(1.1,'/ws "'..spell.english..'" '..spell.target.raw..'')
		windower.send_command:schedule((next_cast - os.clock()),'gs c delayedcast')
		tickdelay = os.clock() + 1.1
	end
	elseif party.count ~= 1 and spell.english == 'Haste' and  get_current_stratagem_count() < 2 then --(data.areas.cities:contains(world.area) or data.areas.adoulin:contains(world.area)) and
		eventArgs.cancel = true
		windower.send_command:schedule((next_cast - os.clock()),'gs c delayedcast')
		tickdelay = os.clock() + 1.1

			elseif party.count ~= 1 and spell.english == 'Haste' and  get_current_stratagem_count() > 0 then --(data.areas.cities:contains(world.area) or data.areas.adoulin:contains(world.area)) and
		cast_delay(1.1)
		windower.chat.input('/ja "Perpetuance" <me>')
		windower.send_command:schedule((next_cast - os.clock()),'gs c delayedcast')
		tickdelay = os.clock() + 1.1

	else
		]]


	--[[
	if party.count ~= 1 and (player.target.type == 'SELF' and  player.target.in_party) and spell.english == 'Haste' and get_current_stratagem_count() > 0 then
		cast_delay(1.1)
		windower.chat.input('/ja "Perpetuance" <me>')
	
	else 
		eventArgs.cancel = true
		windower.chat.input:schedule(1.1,'/ws "'..spell.english..'" '..spell.target.raw..'')
		add_tick_delay(1.1)
	end]]
	--[[ 
		if party.count ~= 1 and (spell.english == 'Sneak' or spell.english == 'Invisible') and get_current_stratagem_count() > 0 then
		cast_delay(1.1)
		windower.chat.input('/ja "Accession" <me>')
		add_to_chat(204, 'Stratagem Charges Available: ['..get_current_stratagem_count()..']~~~')
		send_command('@input /echo <recast=Stratagems>')
		send_command('@input /p <recast=Stratagems>')

	end
	]]

end
function job_pretarget(spell, spellMap, eventArgs)
	if spell.action_type == 'Magic' then
		if state.AutoManawell.value and (AutoManawellSpells:contains(spell.english) or (state.CastingMode.value == 'OccultAcumen' and AutoManawellOccultSpells:contains(spell.english) and actual_cost(spell) > player.mp)) then
			local abil_recasts = windower.ffxi.get_ability_recasts()

			if abil_recasts[35] < latency and not buffactive['amnesia'] then
				eventArgs.cancel = true
				cancel_spell()
				send_command('@input /ja "Manawell" <me>;wait 1;input /ma '..spell.english..' '..spell.target.raw..'')
				return
			end
		end
	end
end

function job_filter_precast(spell, spellMap, eventArgs)

end
function job_precast(spell, spellMap, eventArgs)
	if spell.action_type == 'Magic' then
		if spellMap == 'Cure' or spellMap == 'Curaga' then
			gear.default.obi_back = gear.obi_cure_back
			gear.default.obi_waist = gear.obi_cure_waist
		elseif (spell.english == 'Death' or spell.english == 'Comet') or (spell.skill == 'Elemental Magic' and default_spell_map ~= 'ElementalEnfeeble') then
			if LowTierNukes:contains(spell.english) or spell.english:endswith('helix') then
				gear.default.obi_back = gear.obi_low_nuke_back
				gear.default.obi_waist = gear.obi_low_nuke_waist
			else
				gear.default.obi_back = gear.obi_high_nuke_back
				gear.default.obi_waist = gear.obi_high_nuke_waist
			end
		end

        if state.DeathMode.value ~= 'Off' then
            classes.CustomClass = 'Death'		
        elseif state.CastingMode.value == 'Proc' then
            classes.CustomClass = 'Proc'
        elseif state.CastingMode.value == 'OccultAcumen' then
            classes.CustomClass = 'OccultAcumen'
			state.CastingMode:reset()

        end

	end
end

function job_post_precast(spell, spellMap, eventArgs)

	if spell.action_type == 'Magic' and state.DeathMode.value ~= 'Off' then
		if sets.precast.FC[spell.english] and sets.precast.FC[spell.english].Death then
			equip(sets.precast.FC[spell.english].Death)
		elseif sets.precast.FC[spellMap] and sets.precast.FC[spellMap].Death then
			equip(sets.precast.FC[spellMap].Death)
		elseif sets.precast.FC[spell.skill] and sets.precast.FC[spell.skill].Death then
			equip(sets.precast.FC[spell.skill].Death)
		else
			equip(sets.precast.FC.Death)
		end
	elseif spell.type == 'WeaponSkill' then
		local WSset = standardize_set(get_precast_set(spell, spellMap))
		
		if (WSset.ear1 == "Moonshade Earring" or WSset.ear2 == "Moonshade Earring") then
			-- Replace Moonshade Earring if we're at cap TP
			if sets.MaxTP and get_effective_player_tp(spell, WSset) >= 3000 then
				equip(sets.MaxTP[spell.english] or sets.MaxTP)
			end
		end
	end
end

-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
function job_midcast(spell, action, spellMap, eventArgs)

end

function job_post_midcast(spell, spellMap, eventArgs)
	if spell.action_type == 'Magic' then
		if state.DeathMode.value ~= 'Off' and spell.english ~= 'Death' then
			if sets.midcast[spell.english] and sets.midcast[spell.english].Death then
				equip(sets.midcast[spell.english].Death)
			elseif sets.midcast[spellMap] and sets.midcast[spellMap].Death then
				equip(sets.midcast[spellMap].Death)
			elseif sets.midcast[spell.skill] and sets.midcast[spell.skill].Death then
				equip(sets.midcast[spell.skill].Death)
			else
				equip(sets.precast.FC.Death)
			end

		elseif is_nuke(spell, spellMap) then
			if state.MagicBurstMode.value ~= 'Off' then
				if state.CastingMode.value:contains('Resistant') and sets.ResistantMagicBurst then
					equip(sets.ResistantMagicBurst)
				else
					equip(sets.MagicBurst)
				end
			end

			if player.hpp < 75 and player.tp < 1000 and state.CastingMode.value == 'Fodder' then
				if item_available("Sorcerer's Ring") then
					sets.SorcRing = {ring1="Sorcerer's Ring"}
					equip(sets.SorcRing)
				end
			end
			
			if spell.element == world.weather_element or spell.element == world.day_element then
				if state.CastingMode.value == 'Fodder' then
					-- if item_available('Twilight Cape') and not LowTierNukes:contains(spell.english) and not state.Capacity.value then
						-- sets.TwilightCape = {back="Twilight Cape"}
						-- equip(sets.TwilightCape)
					-- end
					if spell.element == world.day_element then
						if item_available('Zodiac Ring') then
							sets.ZodiacRing = {ring2="Zodiac Ring"}
							equip(sets.ZodiacRing)
						end
					end
				end
				if spell.element == 'Earth' then
					equip(sets.element.Earth)
				end
			end
			
			if spell.element and sets.element[spell.element] then
				equip(sets.element[spell.element])
			end
			
			if state.RecoverMode.value ~= 'Never' and not (state.Buff['Manafont'] or state.Buff['Manawell']) and (state.RecoverMode.value == 'Always' or tonumber(state.RecoverMode.value:sub(1, -2)) > player.mpp) then
				if state.MagicBurstMode.value ~= 'Off' then
					if state.CastingMode.value:contains('Resistant') and sets.ResistantRecoverBurst then
						equip(sets.ResistantRecoverBurst)
					elseif sets.RecoverBurst then
						equip(sets.RecoverBurst)
					elseif sets.RecoverMP then
						equip(sets.RecoverMP)
					end
				elseif sets.RecoverMP then
					equip(sets.RecoverMP)
				end
			end
		end

		if state.Buff['Mana Wall'] and ((state.IdleMode.value:contains('DT') or state.IdleMode.value:contains('Tank')) and (player.in_combat or being_attacked))then
			equip(sets.buff['Mana Wall'])
		end
	end
	if state.CastingMode.value == 'SIRD' then
		equip(sets.SIRD)
	elseif state.CastingMode.value == 'ConserveMP' then
		equip(sets.ConserveMP)
	elseif spell.skill == 'Elemental Magic' and state.CastingMode.value == 'OccultAcumen' then
		equip(sets.OccultAcumen)
		state.CastingMode:reset()

	end
    if spell.skill == 'Enhancing Magic' and classes.NoSkillSpells:contains(spell.english) then
		if state.CastingMode.value == 'SIRD' then
			equip(sets.SIRD)
		elseif state.CastingMode.value == 'ConserveMP' then
			equip(sets.ConserveMP)
		end
	end
	if spell.skill == 'Elemental Magic' and (state.MagicBurst.value or AEBurst) then
		equip(sets.magicburst)
		if data.elements.nuke_of ~= 'Earth' then			
		equip(sets.element.Earth.magicburst)
		end
        if spell.english == "Impact" then
            equip(sets.midcast.Impact)
        end
    end
end
function job_filter_aftercast(spell, spellMap, eventArgs)
	if spell.action_type == 'Magic' then
        if Elemental_Aja:contains(spell.english) then	
            send_command('timers create "'.. spell.english .. '" 105 down spells/01015.png')
            send_command("@wait 105;input /echo <----- All Cumulative Magic Duration Effects Have Expired ----->")
        end
    end
    if not spell.interrupted then
        if spell.english == "Sleep" then
            send_command('timers create "Sleep ' ..tostring(spell.target.name).. ' ' ..(spell.target.index).. '" 60 down spells/00235.png')
        elseif spell.english == "Sleepga" then
            send_command('timers create "Sleepga ' ..tostring(spell.target.name).. ' ' ..(spell.target.index).. '" 60 down spells/00273.png')
        elseif spell.english == "Sleep II" then
            send_command('timers create "Sleep II ' ..tostring(spell.target.name).. ' ' ..(spell.target.index).. '" 90 down spells/00259.png')
        elseif spell.english == "Sleepga II" then
            send_command('timers create "Sleepga II ' ..tostring(spell.target.name).. ' ' ..(spell.target.index).. '" 90 down spells/00274.png')
        elseif spell.english == 'Impact' then
                send_command('timers create "Impact ' ..tostring(spell.target.name).. ' ' ..(spell.target.index).. '" 180 down spells/00502.png')
        elseif Elemental_Debuffs:contains(spell.english) then
            if spell.english == 'Burn' then
                send_command('timers create "Burn ' ..tostring(spell.target.name).. ' ' ..(spell.target.index).. '" 180 down spells/00235.png')
            elseif spell.english == 'Choke' then
                send_command('timers create "Choke ' ..tostring(spell.target.name).. ' ' ..(spell.target.index).. '" 180 down spells/00237.png')
            elseif spell.english == 'Shock' then
                send_command('timers create "Shock ' ..tostring(spell.target.name).. ' ' ..(spell.target.index).. '" 180 down spells/00239.png')
            elseif spell.english == 'Frost' then
                send_command('timers create "Frost ' ..tostring(spell.target.name).. ' ' ..(spell.target.index).. '" 180 down spells/00236.png')
            elseif spell.english == 'Drown' then
                send_command('timers create "Drown ' ..tostring(spell.target.name).. ' ' ..(spell.target.index).. '" 180 down spells/00240.png')
            elseif spell.english == 'Rasp' then
                send_command('timers create "Rasp ' ..tostring(spell.target.name).. ' ' ..(spell.target.index).. '" 180 down spells/00238.png')
            end
        elseif spell.english == "Bind" then
            send_command('timers create "Bind" 60 down spells/00258.png')
        elseif spell.english == "Break" then
            send_command('timers create "Break Petrification" 33 down spells/00255.png')
        elseif spell.english == "Breakga" then
            send_command('timers create "Breakga Petrification" 33 down spells/00365.png') 
		elseif spell.english == "Death" and state.DeathMode.value == 'Single' then
			state.DeathMode:reset()
			if state.DisplayMode.value then update_job_states()	end
        end
	end
end
function job_aftercast(spell, spellMap, eventArgs)
    if not spell.interrupted then
        if spell.english == 'Sleep' or spell.english == 'Sleepga' then
            send_command('@timers c "'..spell.english..' ['..spell.target.name..']" 60 down spells/00220.png')
        elseif spell.english == 'Sleep II' or spell.english == 'Sleepga II' then
            send_command('@timers c "'..spell.english..' ['..spell.target.name..']" 90 down spells/00220.png')
		elseif spell.english == "Sleep II" then
            send_command('timers create "Sleep II ' ..tostring(spell.target.name).. ' ' ..(spell.target.index).. '" 90 down spells/00259.png')
		elseif spell.english == "Death" and state.DeathMode.value == 'Single' then
			state.DeathMode:reset()
			if state.DisplayMode.value then update_job_states()	end
        end
    end
    if spell.english == "Death" then
		send_command('@input /p <t> <recast=Death>')
	end
	if spell.english == "Vidohunir"  then
		send_command('timers c "magic Defense Down ['..spell.target.name..']" 180 down')
	end
end
-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for non-casting events.
-------------------------------------------------------------------------------------------------------------------

-- Called when a player gains or loses a buff.
-- buff == buff gained or lost
-- gain == true if the buff was gained, false if it was lost.
function job_buff_change(buff, gain)
	if buff == "Manafont" then
        if gain then  			
            send_command('input /p "Manafont" [ON]')		
        else	
            send_command('input /p "Manafont" [OFF]')
        end
    end
	if buff == "Subtle Sorcery" then
        if gain then  			
            send_command('input /p "Subtle Sorcery" [ON]')		
        else	
            send_command('input /p "Subtle Sorcery" [OFF]')
        end
    end
	if buff == "Mana Wall" then
        if gain then  			
            send_command('input /p "Mana Wall" [ON]')		
        else	
            send_command('input /p "Mana Wall" [OFF]')
        end
    end
end
-- Handle notifications of general user state change.
function job_state_change(stateField, newValue, oldValue)
    if state.WeaponLock.value == true then
        disable('main','sub')
    else
        enable('main','sub')
    end
	if state.ManaWallMode.value == true and (player.in_combat or being_attacked) and player.hpp < 75 then 
		windower.chat.input('/ja "Mana Wall" <me>')
	end
end
-------------------------------------------------------------------------------------------------------------------
-- User code that supplements standard library decisions.
-------------------------------------------------------------------------------------------------------------------

-- Custom spell mapping.
function job_get_spell_map(spell, default_spell_map)

	if  default_spell_map == 'Cure' or default_spell_map == 'Curaga'  then
		if world.weather_element == 'Light' then
                return 'LightWeatherCure'
		elseif world.day_element == 'Light' then
                return 'LightDayCure'
        end

    elseif spell.skill == 'Elemental Magic' then
		if default_spell_map == 'ElementalEnfeeble' or spell.english:contains('helix') then
			return
        elseif LowTierNukes:contains(spell.english) then
            return 'LowTierNuke'
        else
            return 'HighTierNuke'
        end
	
	elseif spell.skill == "Enfeebling Magic" then
		if spell.english:startswith('Dia') then
			return "Dia"
		elseif spell.type == "WhiteMagic" or spell.english:startswith('Frazzle') or spell.english:startswith('Distract') then
			return 'MndEnfeebles'
		else
			return 'IntEnfeebles'
		end
    end
	
end

-- Modify the default idle set after it was constructed.
function job_customize_idle_set(idleSet)
    if buffactive['Sublimation: Activated'] then
        if (state.IdleMode.value == 'Normal' or state.IdleMode.value:contains('Sphere')) and sets.buff.Sublimation then
            idleSet = set_combine(idleSet, sets.buff.Sublimation)
        elseif state.IdleMode.value:contains('DT') and sets.buff.DTSublimation then
            idleSet = set_combine(idleSet, sets.buff.DTSublimation)
        end
    end
	if state.ManaWallMode.value == true and (player.in_combat or being_attacked) and player.hpp < 75 then 
		windower.chat.input('/ja "Mana Wall" <me>')

	end
    if state.IdleMode.value == 'Normal' or state.IdleMode.value:contains('Sphere') then
		if player.mpp < 51 then
			if sets.latent_refresh then
				idleSet = set_combine(idleSet, sets.latent_refresh)
			end
			
			if (state.Weapons.value == 'None' or state.UnlockWeapons.value) and idleSet.main then
				local main_table = get_item_table(idleSet.main)

				if  main_table and main_table.skill == 12 and sets.latent_refresh_grip then
					idleSet = set_combine(idleSet, sets.latent_refresh_grip)
				end
				
				if player.tp > 10 and sets.TPEat then
					idleSet = set_combine(idleSet, sets.TPEat)
				end
			end
		end
   end
	
	if state.DeathMode.value ~= 'Off' then
        idleSet = set_combine(idleSet, sets.idle.Death)
    end

    if state.Buff['Mana Wall'] then
		idleSet = set_combine(idleSet, sets.buff['Mana Wall'])
    end
        if state.RP.current == 'on' then
        equip(sets.RP)
        disable('neck')
    else
        enable('neck')
    end
    if state.HippoMode.value == true then 
        idleSet = set_combine(idleSet, {feet="Hippo. Socks +1"})
    end
	--[[if (player.in_combat or being_attacked) and (state.IdleMode.current:contains('Normal') or state.IdleMode.current:contains('Refresh')) then
        idleSet = set_combine(idleSet, sets.idle.PDT)
    end]]
    return idleSet
end

function job_customize_kiting_set(baseSet)
    if state.HippoMode.value == true then 
        baseSet = set_combine(baseSet, {feet="Hippo. Socks +1"})
    
	elseif state.Buff['Mana Wall'] and not state.HippoMode.value  then
		baseSet = set_combine(baseSet, sets.buff['Mana Wall'])
		
	end

	return baseSet
end

-- Modify the default melee set after it was constructed.
function job_customize_melee_set(meleeSet)

    if state.Buff['Mana Wall'] then
		meleeSet = set_combine(meleeSet, sets.buff['Mana Wall'])
    end
    if state.RP.current == 'on' then
        equip(sets.RP)
        disable('neck')
    else
        enable('neck')
    end
    return meleeSet
end

function job_customize_defense_set(defenseSet)

    if state.Buff['Mana Wall'] then
		defenseSet = set_combine(defenseSet, sets.buff['Mana Wall'])
    end

    return defenseSet
end

mov = {counter=0}
if player and player.index and windower.ffxi.get_mob_by_index(player.index) then
    mov.x = windower.ffxi.get_mob_by_index(player.index).x
    mov.y = windower.ffxi.get_mob_by_index(player.index).y
    mov.z = windower.ffxi.get_mob_by_index(player.index).z
end

local last_check = 0
moving = false
windower.raw_register_event('prerender',function()
    if os.clock() - last_check < 5 then return end
    last_check = os.clock()	
    mov.counter = mov.counter + 1;
    if state.HippoMode.value == true then 
        moving = false
	elseif buffactive['Mana Wall'] then
		moving = false
	end
end)

-- Function to display the current relevant user state when doing an update.
function display_current_job_state(eventArgs)
    display_current_caster_state()
    eventArgs.handled = true
end

function job_self_command(commandArgs, eventArgs)
		if commandArgs[1]:lower() == 'elemental' then
			handle_elemental(commandArgs)
			eventArgs.handled = true			
		end
		local abil_recasts = windower.ffxi.get_ability_recasts()

		if state.ManaWallMode.value == true and being_attacked and player.hpp < 75 and abil_recasts[39] < latency then 
			windower.chat.input('/ja "Mana Wall" <me>')
		    tickdelay = os.clock() + 1.1
			return false
		end
end


function check_tp_mp_lower()
	local spell_recasts = windower.ffxi.get_spell_recasts()

	if spell_recasts[275] < spell_latency and silent_can_use(275) then
		windower.chat.input('/ma "Absorb-TP" <t>')
		tickdelay = os.clock() + 2
		return true
	elseif spell_recasts[247] < spell_latency and silent_can_use(247) then
		windower.chat.input('/ma "Aspir" <t>')
		tickdelay = os.clock() + 2
		return true
	else
		return false
	end
end

function job_tick()
	if check_stance() then return true end
	if check_arts() then return true end
	if check_buff() then return true end
	if check_buffup() then return true end
	if state.AutoAbsorttpaspirSpam.value and player.in_combat and player.target.type == "MONSTER" and not moving then
		if check_tp_mp_lower() then return true end
			tickdelay = os.clock() + 1.5
		return true
	end
	return false
end

function check_arts()
	if (player.sub_job == 'SCH' and not (state.Buff['SJ Restriction'] or arts_active())) and (buffup ~= '' or (not data.areas.cities:contains(world.area) and ((state.AutoArts.value and player.in_combat) or state.AutoBuffMode.value ~= 'Off'))) then
	
		local abil_recasts = windower.ffxi.get_ability_recasts()

		if abil_recasts[232] < latency then
			windower.chat.input('/ja "Dark Arts" <me>')
			tickdelay = os.clock() + 1
			return true
		end

	end
	
	return false
end

-- Handling Elemental spells within Gearswap.
-- Format: gs c elemental <nuke, helix, skillchain1, skillchain2, weather>
function handle_elemental(cmdParams)
    -- cmdParams[1] == 'elemental'
    -- cmdParams[2] == ability to use

    if not cmdParams[2] then
        add_to_chat(123,'Error: No elemental command given.')
        return
    end
    local command = cmdParams[2]:lower()
	
	if command == 'spikes' then
		windower.chat.input('/ma "'..data.elements.spikes_of[state.ElementalMode.value]..' Spikes" <me>')
		return
	elseif command == 'enspell' then
		windower.chat.input('/ma "En'..data.elements.enspell_of[state.ElementalMode.value]..'" <me>')
		return
	--Leave out target, let shortcuts auto-determine it.
	elseif command == 'weather' then
		if player.sub_job == 'RDM' then
			windower.chat.input('/ma "Phalanx" <me>')
		else
			local spell_recasts = windower.ffxi.get_spell_recasts()
			if (player.target.type == 'SELF' or not player.target.in_party) and buffactive[data.elements.storm_of[state.ElementalMode.value]] and not buffactive['Klimaform'] and spell_recasts[287] < spell_latency then
				windower.chat.input('/ma "Klimaform" <me>')
			else
				windower.chat.input('/ma "'..data.elements.storm_of[state.ElementalMode.value]..'"')
			end
		end
		return
	end

	local target = '<t>'
	if cmdParams[3] then
		if tonumber(cmdParams[3]) then
			target = tonumber(cmdParams[3])
		else
			target = table.concat(cmdParams, ' ', 3)
			target = get_closest_mob_id_by_name(target) or '<t>'
		end
	end

    if command == 'nuke' then
		local spell_recasts = windower.ffxi.get_spell_recasts()
		
		if state.ElementalMode.value == 'Light' then
			if spell_recasts[29] < spell_latency and actual_cost(get_spell_table_by_name('Banish II')) < player.mp then
				windower.chat.input('/ma "Banish II" '..target..'')
			elseif spell_recasts[28] < spell_latency and actual_cost(get_spell_table_by_name('Banish')) < player.mp then
				windower.chat.input('/ma "Banish" '..target..'')
			else
				add_to_chat(123,'Abort: Banishes on cooldown or not enough MP.')
			end

		elseif state.ElementalMode.value == 'Dark' then
			if spell_recasts[219] < spell_latency and actual_cost(get_spell_table_by_name('Comet')) < player.mp then
				windower.chat.input('/ma "Comet" '..target..'')
			else
				add_to_chat(123,'Abort: Comet on cooldown or not enough MP.')
			end

		else
			if player.job_points[(res.jobs[player.main_job_id].ens):lower()].jp_spent > 99 and spell_recasts[get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..' VI').id] < spell_latency and actual_cost(get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..' VI')) < player.mp then
				windower.chat.input('/ma "'..data.elements.nuke_of[state.ElementalMode.value]..' VI" '..target..'')
			else
				local tiers = {' V',' IV',' III',' II',''}
				for k in ipairs(tiers) do
					if spell_recasts[get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'').id] < spell_latency and actual_cost(get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'')) < player.mp then
						windower.chat.input('/ma "'..data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'" '..target..'')
						return
					end
				end
				add_to_chat(123,'Abort: All '..data.elements.nuke_of[state.ElementalMode.value]..' nukes on cooldown or or not enough MP.')
			end
		end
			
	elseif command == 'ninjutsu' then
		windower.chat.input('/ma "'..data.elements.ninjutsu_nuke_of[state.ElementalMode.value]..': Ni" '..target..'')
			
	elseif command == 'smallnuke' then
		local spell_recasts = windower.ffxi.get_spell_recasts()
	
		local tiers = {' III',''}
		for k in ipairs(tiers) do
			if spell_recasts[get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'').id] < spell_latency and actual_cost(get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'')) < player.mp then
				windower.chat.input('/ma "'..data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'" '..target..'')
				return
			end
		end
		add_to_chat(123,'Abort: All '..data.elements.nuke_of[state.ElementalMode.value]..' nukes on cooldown or or not enough MP.')
	elseif command == 'proc3' then
		local spell_recasts = windower.ffxi.get_spell_recasts()
	
		local tiers = {' III',''}
		for k in ipairs(tiers) do
			if spell_recasts[get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'').id] < spell_latency and actual_cost(get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'')) < player.mp then
				windower.chat.input('/ma "'..data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'" '..target..'')
				return
			end
		end
		add_to_chat(123,'Abort: All '..data.elements.nuke_of[state.ElementalMode.value]..' nukes on cooldown or or not enough MP.')
		
	elseif command == 'proc4' then
		local spell_recasts = windower.ffxi.get_spell_recasts()
	
		local tiers = {' IV',''}
		for k in ipairs(tiers) do
			if spell_recasts[get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'').id] < spell_latency and actual_cost(get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'')) < player.mp then
				windower.chat.input('/ma "'..data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'" '..target..'')
				return
			end
		end
		add_to_chat(123,'Abort: All '..data.elements.nuke_of[state.ElementalMode.value]..' nukes on cooldown or or not enough MP.')
		
	elseif command:contains('tier') then
		local spell_recasts = windower.ffxi.get_spell_recasts()
		local tierlist = {['tier1']='',['tier2']=' II',['tier3']=' III',['tier4']=' IV',['tier5']=' V',['tier6']=' VI'}
		
		windower.chat.input('/ma "'..data.elements.nuke_of[state.ElementalMode.value]..tierlist[command]..'" '..target..'')
		
	elseif command:contains('aga') or command == 'aja' then
		local spell_recasts = windower.ffxi.get_spell_recasts()
		local tierkey = {'aga3','aga2','aga1'}
		local tierlist = {['aja']='ja',['aga3']='ga III',['aga2']='ga II',['aga1']='ga',}
		if command == 'aga' then
			for i in ipairs(tierkey) do
				if spell_recasts[get_spell_table_by_name(data.elements.nukega_of[state.ElementalMode.value]..''..tierlist[tierkey[i]]..'').id] < spell_latency and actual_cost(get_spell_table_by_name(data.elements.nukega_of[state.ElementalMode.value]..''..tierlist[tierkey[i]]..'')) < player.mp then
					windower.chat.input('/ma "'..data.elements.nukega_of[state.ElementalMode.value]..''..tierlist[tierkey[i]]..'" '..target..'')
					return
				end
			end
		else
			windower.chat.input('/ma "'..data.elements.nukega_of[state.ElementalMode.value]..tierlist[command]..'" '..target..'')
		end

	elseif command == 'ara' then
		windower.chat.input('/ma "'..data.elements.nukera_of[state.ElementalMode.value]..'ra" '..target..'')
		
	elseif command == 'helix' then
		windower.chat.input('/ma "'..data.elements.helix_of[state.ElementalMode.value]..'helix" '..target..'')
	
	elseif command == 'ancientmagic' then
		windower.chat.input('/ma "'..data.elements.ancient_nuke_of[state.ElementalMode.value]..'" '..target..'')
		
	elseif command == 'ancientmagic2' then
		windower.chat.input('/ma "'..data.elements.ancient_nuke_of[state.ElementalMode.value]..' II" '..target..'')
		
	elseif command == 'enfeeble' then
		windower.chat.input('/ma "'..data.elements.elemental_enfeeble_of[state.ElementalMode.value]..'" '..target..'')
	
	elseif command == 'bardsong' then
		windower.chat.input('/ma "'..data.elements.threnody_of[state.ElementalMode.value]..' Threnody" '..target..'')
	else
        add_to_chat(123,'Unrecognized elemental command.')
    end
end

function check_stance()
	if state.Stance.value ~= 'None' and player.in_combat then
		
		local abil_recasts = windower.ffxi.get_ability_recasts()


		if state.Stance.value == 'Ebullience' and not buffactive['Ebullience'] and being_attacked and buffactive["Dark Arts"] and get_current_stratagem_count() > 0 then
			windower.chat.input('/ja "Ebullience" <me>')
			tickdelay = os.clock() + 1.1
			add_to_chat(204, '~~~Current Stratagem Charges Available: ['..get_current_stratagem_count()..']~~~')
			return true
		else
			return false
		end
	end
end

buff_activation_time = nil
last_auto_buff_mode = nil

function check_buff()
	if last_auto_buff_mode ~= state.AutoBuffMode.value then
        buff_activation_time = os.clock()
        last_auto_buff_mode = state.AutoBuffMode.value
        return false
    end

    if not buff_activation_time or os.clock() - buff_activation_time < 3 then
        return false
    end
	
	if state.AutoBuffMode.value ~= 'Off' and not data.areas.cities:contains(world.area) then
		local spell_recasts = windower.ffxi.get_spell_recasts()
		for i in pairs(buff_spell_lists[state.AutoBuffMode.Value]) do
			if not buffactive[buff_spell_lists[state.AutoBuffMode.Value][i].Buff] and (buff_spell_lists[state.AutoBuffMode.Value][i].When == 'Always' or (buff_spell_lists[state.AutoBuffMode.Value][i].When == 'Combat' and (player.in_combat or being_attacked)) or (buff_spell_lists[state.AutoBuffMode.Value][i].When == 'Engaged' and player.status == 'Engaged') or (buff_spell_lists[state.AutoBuffMode.Value][i].When == 'Idle' and player.status == 'Idle') or (buff_spell_lists[state.AutoBuffMode.Value][i].When == 'OutOfCombat' and not (player.in_combat or being_attacked))) and spell_recasts[buff_spell_lists[state.AutoBuffMode.Value][i].SpellID] < spell_latency and silent_can_use(buff_spell_lists[state.AutoBuffMode.Value][i].SpellID) then
				windower.chat.input('/ma "'..buff_spell_lists[state.AutoBuffMode.Value][i].Name..'" <me>')
				tickdelay = os.clock() + 2
				return true
			end
		end
		if not buffactive['Ebullience'] and (player.in_combat or being_attacked) and buffactive["Dark Arts"] and get_current_stratagem_count() > 0 then 
				windower.chat.input('/ja "Ebullience" <me>')
				tickdelay = os.clock() + 2
                --send_command('@input /p <recast=Stratagems>')
                add_to_chat(204, '~~~Current Stratagem Charges Available: ['..get_current_stratagem_count()..']~~~')
		end
	else
		return false
	end
end

function check_buffup()
	if buffup ~= '' then
		local needsbuff = false
		for i in pairs(buff_spell_lists[buffup]) do
			if not buffactive[buff_spell_lists[buffup][i].Buff] and silent_can_use(buff_spell_lists[buffup][i].SpellID) then
				needsbuff = true
				break
			end
		end
	
		if not needsbuff then
			add_to_chat(217, 'All '..buffup..' buffs are up!')
			buffup = ''
			return false
		end
		
		local spell_recasts = windower.ffxi.get_spell_recasts()
		
		for i in pairs(buff_spell_lists[buffup]) do
			if not buffactive[buff_spell_lists[buffup][i].Buff] and silent_can_use(buff_spell_lists[buffup][i].SpellID) and spell_recasts[buff_spell_lists[buffup][i].SpellID] < spell_latency then
				windower.chat.input('/ma "'..buff_spell_lists[buffup][i].Name..'" <me>')
				tickdelay = os.clock() + 2
				return true
			end
		end
		
		return false
	else
		return false
	end
end

windower.register_event('incoming text',function(org)     

	--[[
tel what proc need
The fiend appears vulnerable to ice elemental magic!
proc done
attack staggers the fiend!
]]
	--abyssea stagger
	if string.find(org, "attack staggers the fiend!") then
		windower.send_command('input /p Stagger! <call14>!')  -- code add by (Aragan@Asura)
		send_command('gs c set CastingMode Normal;')
	end
	if string.find(org, "Aita readies Vivisection") then
		windower.chat.input('/ja "Mana Wall" <me>')
		state.MagicalDefenseMode:set('MDT')
		windower.send_command('input /p Aita uses Vivisection <call14>!')  -- code add by (Aragan@Asura)
	end
	if string.find(org, "Degei readies Vivisection") then
		windower.chat.input('/ja "Mana Wall" <me>')
		state.MagicalDefenseMode:set('MDT')

		windower.send_command('input /p Degei uses Vivisection <call14>!')  -- code add by (Aragan@Asura)
	end
	if string.find(org, "Triboulex readies Setting the Stage") then
		windower.chat.input('/ja "Mana Wall" <me>')
		state.MagicalDefenseMode:set('MDT')

		windower.send_command('input /p Triboulex uses Setting the Stage <call14>!')  -- code add by (Aragan@Asura)
	end
	if string.find(org, "Skomora readies Setting the Stage") then
		windower.chat.input('/ja "Mana Wall" <me>')
		state.MagicalDefenseMode:set('MDT')

		windower.send_command('input /p Skomora uses Setting the Stage <call14>!')  -- code add by (Aragan@Asura)
	end
	if string.find(org, "The fiend appears vulnerable to ice elemental magic!") then
		windower.send_command('gs c set ElementalMode Ice')
	end
	if string.find(org, "The fiend appears vulnerable to water elemental magic!") then
		windower.send_command('gs c set ElementalMode water')
	end
	if string.find(org, "The fiend appears vulnerable to lightning elemental magic!") then
		windower.send_command('gs c set ElementalMode Lightning')
	end	
	if string.find(org, "The fiend appears vulnerable to fire elemental magic!") then
		windower.send_command('gs c set ElementalMode Fire')
	end	
	if string.find(org, "The fiend appears vulnerable to wind elemental magic!") then
		windower.send_command('gs c set ElementalMode Wind')
	end	
	if string.find(org, "The fiend appears vulnerable to earth elemental magic!") then
		windower.send_command('gs c set ElementalMode Earth')
	end


	--Sortie 	--Vagary
	if string.find(org, "Flaming Kick") or string.find(org, "Demonfire") then
		windower.send_command('gs c set ElementalMode water')
	end
	if string.find(org, "Flashflood") or string.find(org, "Torrential Pain") then
		windower.send_command('gs c set ElementalMode Lightning')
	end
	if string.find(org, "Icy Grasp") or string.find(org, "Frozen Blood") then
		windower.send_command('gs c set ElementalMode Fire')
	end
	if string.find(org, "Eroding Flesh") or string.find(org, "Ensepulcher") then
		windower.send_command('gs c set ElementalMode Wind')
	end
	if string.find(org, "Fulminous Smash") or string.find(org, "Ceaseless Surge") then
		windower.send_command('gs c set ElementalMode Earth')
	end
	if string.find(org, "Blast of Reticence") then
		windower.send_command('gs c set ElementalMode Ice')
	end
end)

buff_spell_lists = {
	Auto = {--Options for When are: Always, Engaged, Idle, OutOfCombat, Combat
		{Name='Reraise',		Buff='Reraise',			SpellID=113,	When='Always'},
		{Name='Haste',			Buff='Haste',			SpellID=57,		When='Always'},
		{Name='Refresh',		Buff='Refresh',			SpellID=109,	When='Always'},
		{Name='Stoneskin',		Buff='Stoneskin',		SpellID=54,		When='Always'},
		{Name='Klimaform',		Buff='Klimaform',		SpellID=287,	When='Combat'},
	},
	MB = {--Options for When are: Always, Engaged, Idle, OutOfCombat, Combat

	{Name='Klimaform',		Buff='Klimaform',		SpellID=287,	When='Combat'},
},
	Default = {
		{Name='Reraise',		Buff='Reraise',			SpellID=113,	Reapply=false},
		{Name='Haste',			Buff='Haste',			SpellID=57,		Reapply=false},
		{Name='Refresh',		Buff='Refresh',			SpellID=109,	Reapply=false},
		{Name='Aquaveil',		Buff='Aquaveil',		SpellID=55,		Reapply=false},
		{Name='Stoneskin',		Buff='Stoneskin',		SpellID=54,		Reapply=false},
		{Name='Klimaform',		Buff='Klimaform',		SpellID=287,	Reapply=false},
		{Name='Blink',			Buff='Blink',			SpellID=53,		Reapply=false},
		{Name='Regen',			Buff='Regen',			SpellID=108,	Reapply=false},
		{Name='Phalanx',		Buff='Phalanx',			SpellID=106,	Reapply=false},
	},
}

res = require('resources')

ignored_spells = {
    ["Sneak"] = true,
    ["Invisible"] = true,
    ["Stoneskin"] = true,
    ["Blink"] = true,
}

windower.register_event('action', function(act)
    -- if not state.AutoStunMode.value then return end
    if act.category ~= 8 then return end  -- Magic cast only

    local actor = act.actor_id
    local mob = windower.ffxi.get_mob_by_id(actor)
    if not mob or not mob.name then return end

    local param = act.param
    local spell = res.spells[param]
    if not spell or not spell.en then return end

    local spell_name = spell.en
    if ignored_spells[spell_name] then return end

    windower.send_command('input /ma "Stun" '..mob.name)
end)