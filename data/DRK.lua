--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- __________.__                                ________                          __               .__.__  __      __  .__    .__           _____.__.__              
-- \______   |  |   ____ _____    ______ ____   \______ \   ____     ____   _____/  |_    ____   __| _|___/  |_  _/  |_|  |__ |__| ______ _/ ____|__|  |   ____      
--  |     ___|  | _/ __ \\__  \  /  ____/ __ \   |    |  \ /  _ \   /    \ /  _ \   __\ _/ __ \ / __ ||  \   __\ \   __|  |  \|  |/  ___/ \   __\|  |  | _/ __ \     
--  |    |   |  |_\  ___/ / __ \_\___ \\  ___/   |    `   (  <_> ) |   |  (  <_> |  |   \  ___// /_/ ||  ||  |    |  | |   Y  |  |\___ \   |  |  |  |  |_\  ___/     
--  |____|   |____/\___  (____  /____  >\___  > /_______  /\____/  |___|  /\____/|__|    \___  \____ ||__||__|    |__| |___|  |__/____  >  |__|  |__|____/\___  > /\ 
--                     \/     \/     \/     \/          \/              \/                   \/     \/                      \/        \/                      \/  \/ 
--
--	Please do not edit this file!							Please do not edit this file!							Please do not edit this file!
--
--	Editing this file will cause you to be unable to use Github Desktop to update!
--
--	Any changes you wish to make in this file you should be able to make by overloading. That is Re-Defining the same variables or functions in another file, by copying and
--	pasting them to a file that is loaded after the original file, all of my library files, and then job files are loaded first.
--	The last files to load are the ones unique to you. User-Globals, Charactername-Globals, Charactername_Job_Gear, in that order, so these changes will take precedence.
--
--	You may wish to "hook" into existing functions, to add functionality without losing access to updates or fixes I make, for example, instead of copying and editing
--	status_change(), you can instead use the function user_status_change() in the same manner, which is called by status_change() if it exists, most of the important 
--  gearswap functions work like this in my files, and if it's unique to a specific job, user_job_status_change() would be appropriate instead.
--
--  Variables and tables can be easily redefined just by defining them in one of the later loaded files: autofood = 'Miso Ramen' for example.
--  States can be redefined as well: state.HybridMode:options('Normal','PDT') though most of these are already redefined in the gear files for editing there.
--	Commands can be added easily with: user_self_command(commandArgs, eventArgs) or user_job_self_command(commandArgs, eventArgs)
--
--	If you're not sure where is appropriate to copy and paste variables, tables and functions to make changes or add them:
--		User-Globals.lua - 			This file loads with all characters, all jobs, so it's ideal for settings and rules you want to be the same no matter what.
--		Charactername-Globals.lua -	This file loads with one character, all jobs, so it's ideal for gear settings that are usable on all jobs, but unique to this character.
--		Charactername_Job_Gear.lua-	This file loads only on one character, one job, so it's ideal for things that are specific only to that job and character.
--
--
--	If you still need help, feel free to contact me on discord or ask in my chat for help: https://discord.gg/ug6xtvQ
--  !Please do NOT message me in game about anything third party related, though you're welcome to message me there and ask me to talk on another medium.
--
--  Please do not edit this file!							Please do not edit this file!							Please do not edit this file!
-- __________.__                                ________                          __               .__.__  __      __  .__    .__           _____.__.__              
-- \______   |  |   ____ _____    ______ ____   \______ \   ____     ____   _____/  |_    ____   __| _|___/  |_  _/  |_|  |__ |__| ______ _/ ____|__|  |   ____      
--  |     ___|  | _/ __ \\__  \  /  ____/ __ \   |    |  \ /  _ \   /    \ /  _ \   __\ _/ __ \ / __ ||  \   __\ \   __|  |  \|  |/  ___/ \   __\|  |  | _/ __ \     
--  |    |   |  |_\  ___/ / __ \_\___ \\  ___/   |    `   (  <_> ) |   |  (  <_> |  |   \  ___// /_/ ||  ||  |    |  | |   Y  |  |\___ \   |  |  |  |  |_\  ___/     
--  |____|   |____/\___  (____  /____  >\___  > /_______  /\____/  |___|  /\____/|__|    \___  \____ ||__||__|    |__| |___|  |__/____  >  |__|  |__|____/\___  > /\ 
--                     \/     \/     \/     \/          \/              \/                   \/     \/                      \/        \/                      \/  \/ 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
-- Setup functions for this job.  Generally should not be modified.
-------------------------------------------------------------------------------------------------------------------

-- Initialization function for this job file.
function get_sets()
    -- Load and initialize the include file.
    include('Sel-Include.lua')
	include('Kate-DefenseDown')

	organizer_items = {
		"Airmid's Gorget",
		"Tumult's Blood",
		"Sarama's Hide",
		"Hidhaegg's Scale",
		"Sovereign's Hide",
		"Grape Daifuku",
		"Soy Ramen",
		"G. Curry Bun +1",
		"Pukatrice Egg",
		"Moogle Amp.",
		"Popo. con Queso",
		"Pear Crepe",
		"Crab Sushi",
		"Om. Sandwich",
		"Red Curry Bun",    
		"Gyudon",
		"Reraiser",
		"Hi-Reraiser",
		"Vile Elixir",
		"Vile Elixir +1",
		"Miso Ramen",
		"Carbonara",
		"Silent Oil",
		"Salt Ramen",
		"Panacea",
		"Sublime Sushi",
		"Sublime Sushi 1+",
		"Prism Powder",
		"Antacid",
		"Icarus Wing",
		"Warp Cudgel",
		"Holy Water",
		"Sanjaku-Tenugui",
		"Shinobi-Tabi",
		"Shihei",
		"Remedy",
		"Emporox's Ring",
		"Red Curry Bun",
		"Instant Reraise",
		"Black Curry Bun",
		"Rolan. Daifuku",
		"Reraise Earring",}

end

    -- Setup vars that are user-independent.
function job_setup()
	set_dual_wield()
    attack2 = 5000 -- This LUA will equip "high buff" WS sets if the attack value of your TP set (or idle set if WSing from idle) is higher than this value	
	-- already_announced_by_name = already_announced_by_name or {}

    state.Buff.Souleater = buffactive.Souleater or false
    state.Buff['Dark Seal'] = buffactive['Dark Seal'] or false
	state.Buff['Nether Void'] = buffactive['Nether Void'] or false
	state.Buff['Diabolic Eye'] = buffactive['Diabolic Eye'] or false
    state.Buff['Aftermath'] = buffactive['Aftermath'] or false
    state.Buff['Aftermath: Lv.3'] = buffactive['Aftermath: Lv.3'] or false
    state.Buff.Hasso = buffactive.Hasso or false
    state.Buff.Seigan = buffactive.Seigan or false
	state.Stance = M{['description']='Stance','Hasso','Seigan','None'}
	state.DrainSwapWeaponMode = M{'Never','300','1000','Always'}
	state.MagicBurst = M(false, 'Magic Burst')
    state.WeaponLock = M(false, 'Weapon Lock')
    state.AutoEquipBurst = M(true)
    state.RP = M(false, "Reinforcement Points Mode")    
	state.SubtleBlowMode = M(false, 'SubtleBlow Mode') 
	state.AutoReraiseMode = M(true, 'Auto Reraise Mode')
    state.AutoAbsorttpaspirSpam = M(false,'Auto Absort tp aspir Spam Mode')
    state.AbsorbMode = M{['description']='AbsorbMode','Potency','ACC'}
    state.SouleaterMode = M(true, 'Soul Eater Mode')
    state.LastResortMode = M(true,false)
	
	-- Use Gavialis helm?
	-- Weaponskills you want Gavialis helm used with (only considered if use_gavialis = true)
	use_gavialis = true

	autows = ''
	autofood = 'Soy Ramen'
	autonuke = 'Absorb-TP'

	LowTierNukes = S{'Stone', 'Water', 'Aero', 'Fire', 'Blizzard', 'Thunder',
	'Stone II', 'Water II', 'Aero II', 'Fire II', 'Blizzard II', 'Thunder II',
	'Stonega', 'Waterga', 'Aeroga', 'Firaga', 'Blizzaga', 'Thundaga'}
	wsList = S{}

	 -- Greatswords you use. 
	 gsList = S{'Ragnarok','Caladbolg','Nandaka','Foreshock Sword','Agwu\'s Claymore'}
	 scytheList = S{'Apocalypse', 'Anguta'}
	 remaWeapons = S{'Caladbolg', 'Liberator', 'Apocalypse','Ragnarok','Nandaka', 'Anguta'}
	 shields = S{'Blurred Shield +1'}
	 -- Mote has capitalization errors in the default Absorb mappings, so we use our own
	 absorbs = S{'Absorb-STR', 'Absorb-DEX', 'Absorb-VIT', 'Absorb-AGI', 'Absorb-INT', 'Absorb-MND', 'Absorb-CHR', 'Absorb-Attri', 'Absorb-MaxAcc', 'Absorb-TP'}
	 state.Absorbs = M{['description']='Absorbs', 'Absorb-TP', 'Absorb-VIT','Absorb-Attri', 'Absorb-MaxAcc','Absorb-STR', 'Absorb-DEX', 'Absorb-AGI', 'Absorb-INT', 'Absorb-MND', 'Absorb-CHR',}
	  -- Offhand weapons used to activate DW mode
	 swordList = S{"Naegling", "Sangarius +1", "Reikiko", "Perun +1", "Tanmogayi", "Loxotic Mace +1", "Ternion Dagger +1", "Zantetsuken"}
	 sets.weaponList = {"Caladbolg", "Liberator", "Apocalypse", "Nandaka", "Blurred Shield +1", "Naegling", "Sangarius +1", "Usonmunku", "Perun +1", "Tanmogayi", "Loxotic Mace +1"}
	state.ElementalMode = M{['description'] = 'Elemental Mode','Fire','Water','Lightning','Earth','Wind','Ice','Light','Dark',}
	
	Haste = 0
	DW_needed = 0
	DW = false
	determine_haste_group()
	update_combat_form()  
	
	update_melee_groups()

	init_job_states({"Capacity","AutoRuneMode","AutoWSMode","AutoShadowMode","AutoFoodMode","AutoNukeMode","AutoStunMode","AutoDefenseMode","AutoMedicineMode","AutoReraiseMode"},{"AutoTrustMode","AutoBuffMode","AutoSambaMode","Weapons","OffenseMode","WeaponskillMode","IdleMode","Passive","RuneElement","ElementalMode","CastingMode","Absorbs","Stance","DrainSwapWeaponMode","TreasureMode",})
end
	
-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for standard casting events.
-------------------------------------------------------------------------------------------------------------------
-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
-- Set eventArgs.useMidcastGear to true if we want midcast gear equipped on precast.
function job_filter_pretarget(spell, spellMap, eventArgs)
	local abil_recasts = windower.ffxi.get_ability_recasts()

	absorbs = S{
		'Absorb-STR', 'Absorb-DEX', 'Absorb-VIT', 'Absorb-AGI',
		'Absorb-INT', 'Absorb-MND', 'Absorb-CHR', 'Absorb-Attri',
		'Absorb-MaxAcc','Drain III','Drain II','Drain'
	}
	
	if absorbs:contains(spell.english) and not buffactive['Nether Void'] and abil_recasts[91] < latency then
		cast_delay(1.1)
		windower.chat.input('/ja "Nether Void" <me>')
		windower.send_command:schedule((next_cast - os.clock()), 'gs c delayedcast')
		tickdelay = os.clock() + 1.1
	end
	if spell.english == 'Dread Spikes' and not buffactive['Dark Seal'] and abil_recasts[89] < latency then --(data.areas.cities:contains(world.area) or data.areas.adoulin:contains(world.area)) and
		cast_delay(1.1)
		windower.chat.input('/ja "Dark Seal" <me>')
		windower.send_command:schedule((next_cast - os.clock()),'gs c delayedcast')
		tickdelay = os.clock() + 1.1
	end

end

function job_precast(spell, spellMap, eventArgs)
    if spell.english == 'Warcry' then
        if buffactive['Warcry'] then
            cancel_spell()
            add_to_chat(123, spell.name..' Canceled: Warcry its up [active]')
        end
    end
	if spell.type == 'WeaponSkill' then
        if state.WeaponskillMode.value == "None" then
            equip() 
        end
    end
	if spell.type == 'WeaponSkill' and state.AutoBuffMode.value ~= 'Off' then
		local abil_recasts = windower.ffxi.get_ability_recasts()
		if spell.english == 'Entropy' and not buffactive['Sekkanoki'] and abil_recasts[95] < latency then
			eventArgs.cancel = true
			windower.chat.input('/ja "Consume Mana" <me>')
			windower.chat.input:schedule(1,'/ws "Entropy" <t>')
			tickdelay = os.clock() + 1.25
			return
		elseif player.sub_job == 'SAM' and not state.Buff['SJ Restriction'] then
				if player.tp > 1850 and not buffactive['Consume Mana'] and abil_recasts[140] < latency then
					eventArgs.cancel = true
					windower.chat.input('/ja "Sekkanoki" <me>')
					windower.chat.input:schedule(1,'/ws "'..spell.english..'" '..spell.target.raw..'')
					tickdelay = os.clock() + 1.25
					return
				elseif abil_recasts[134] < latency then
					eventArgs.cancel = true
					windower.chat.input('/ja "Meditate" <me>')
					windower.chat.input:schedule(1,'/ws "'..spell.english..'" '..spell.target.raw..'')
					tickdelay = os.clock() + 1.25
					return
				end
			end
	end
end

-- Run after the general precast() is done.
function job_post_precast(spell, spellMap, eventArgs)
	
	if spell.type == 'WeaponSkill' then

		local WSset = standardize_set(get_precast_set(spell, spellMap))
		local wsacc = check_ws_acc()
		
		if (WSset.ear1 == "Moonshade Earring" or WSset.ear2 == "Moonshade Earring") then
			-- Replace Moonshade Earring if we're at cap TP
			if get_effective_player_tp(spell, WSset) >= 3000 then
				if wsacc:contains('Acc') and not buffactive['Sneak Attack'] and sets.AccMaxTP then
					local AccMaxTPset = standardize_set(sets.AccMaxTP)

					if (AccMaxTPset.ear1:startswith("Lugra Earring") or AccMaxTPset.ear2:startswith("Lugra Earring")) and not classes.DuskToDawn and sets.AccDayMaxTPWSEars then
						equip(sets.AccDayMaxTPWSEars[spell.english] or sets.AccDayMaxTPWSEars)
					else
						equip(sets.AccMaxTP[spell.english] or sets.AccMaxTP)
					end
				elseif sets.MaxTP then
					local MaxTPset = standardize_set(sets.MaxTP)
					if (MaxTPset.ear1:startswith("Lugra Earring") or MaxTPset.ear2:startswith("Lugra Earring")) and not classes.DuskToDawn and sets.DayMaxTPWSEars then
						equip(sets.DayMaxTPWSEars[spell.english] or sets.DayMaxTPWSEars)
					else
						equip(sets.MaxTP[spell.english] or sets.MaxTP)
					end
				else
				end
			else
				if wsacc:contains('Acc') and not buffactive['Sneak Attack'] and (WSset.ear1:startswith("Lugra Earring") or WSset.ear2:startswith("Lugra Earring")) and not classes.DuskToDawn and sets.AccDayWSEars then
					equip(sets.AccDayWSEars[spell.english] or sets.AccDayWSEars)
				elseif (WSset.ear1:startswith("Lugra Earring") or WSset.ear2:startswith("Lugra Earring")) and not classes.DuskToDawn and sets.DayWSEars then
					equip(sets.DayWSEars[spell.english] or sets.DayWSEars)
				end
			end
		elseif (WSset.ear1:startswith("Lugra Earring") or WSset.ear2:startswith("Lugra Earring")) and not classes.DuskToDawn then
			if wsacc:contains('Acc') and not buffactive['Sneak Attack'] and sets.AccDayWSEars then
				equip(sets.AccDayWSEars[spell.english] or sets.AccDayWSEars)
			elseif sets.DayWSEars then
				equip(sets.DayWSEars[spell.english] or sets.DayWSEars)
			end
		end
		if state.Buff.Souleater then   
			equip(sets.buff.Souleater)
		end
		if is_sc_element_today(spell) then
            if state.OffenseMode.current == 'Normal' and wsList:contains(spell.english) then
                equip(sets.WSDayBonus)
            end
        end
	end

end

Wants_Dark_Seal_maps = S{
	'Absorb-STR','Absorb-DEX','Absorb-VIT',
	'Absorb-INT','Absorb-MND','Absorb-CHR','Absorb-AGI','Absorb-ACC', 'Dread Spikes', 'Drain II', 'Drain III'}


function job_post_midcast(spell, spellMap, eventArgs)

	if state.CastingMode.value == 'SIRD' then
        equip(sets.SIRD)
    elseif state.CastingMode.value == 'DT' then
        equip(sets.DT)
	elseif state.CastingMode.value == 'ConserveMP' then
        equip(sets.ConserveMP)
    end
	-- if spell.interrupts and sets.midcast[spell.english] and sets.midcast[spell.english].SIRD then
    --     equip(sets.midcast[spell.english].SIRD)
    -- elseif spell.interrupts and sets.midcast[spell.skill] and sets.midcast[spell.skill].SIRD then
    --     equip(sets.midcast[spell.skill].SIRD)
    -- end
	if spell.skill == 'Elemental Magic' and default_spell_map ~= 'ElementalEnfeeble' and spell.english ~= 'Impact' then
		if state.MagicBurstMode.value ~= 'Off' then 
			equip(sets.MagicBurst) 
		end
		if spell.element == world.weather_element or spell.element == world.day_element then
			if state.CastingMode.value == 'Fodder' then
				if spell.element == world.day_element then
					if item_available('Zodiac Ring') then
						sets.ZodiacRing = {ring2="Zodiac Ring"}
						equip(sets.ZodiacRing)
					end
				end
			end
		end
		
		if spell.element and sets.element[spell.element] then
			equip(sets.element[spell.element])
		end
	elseif spell.skill == 'Dark Magic' then
		if state.Buff['Nether Void'] and sets.buff['Nether Void'] and (Wants_Dark_Seal_maps:contains(spell.english) or spell.english == 'Absorb-Attri') then
			equip(sets.buff['Nether Void'])
		end
		if state.Buff['Dark Seal'] and sets.buff['Dark Seal'] and Wants_Dark_Seal_maps:contains(spell.english)  then
			equip(sets.buff['Dark Seal'])
		end
		if (spell.english == 'Drain II' or spell.english == 'Drain III') and state.DrainSwapWeaponMode.value ~= 'Never' then
			if sets.DrainWeapon and (state.DrainSwapWeaponMode.value == 'Always' or tonumber(state.DrainSwapWeaponMode.value) > player.tp) then
				enable('main','sub','range','ammo')
				equip(sets.DrainWeapon)
			end
		end
		if Wants_Dark_Seal_maps:contains(spell.english) and spellMap == "Absorb" and state.DrainSwapWeaponMode.value ~= 'Never' then
			if sets.AbsorbWeapon and (state.DrainSwapWeaponMode.value == 'Always' or tonumber(state.DrainSwapWeaponMode.value) > player.tp) then
				enable('main','sub','range','ammo')
				equip(sets.AbsorbWeapon)
			end
		end
		if spell.english == 'Dread Spikes' and state.DrainSwapWeaponMode.value ~= 'Never' then
			if sets.DreadWeapon and (state.DrainSwapWeaponMode.value == 'Always' or tonumber(state.DrainSwapWeaponMode.value) > player.tp) then
				enable('main','sub','range','ammo')				
				equip(sets.DreadWeapon)
			end
		end
		if spell.skill == 'Elemental Magic' and (state.MagicBurst.value or AEBurst) then
			equip(sets.magicburst)
			if spell.english == "Impact" then
				equip(sets.midcast.Impact)
			end
		end
	end
	if state.AbsorbMode.value == 'ACC' and (spell.skill == 'Dark Magic' or spell.skill == 'Enfeebling Magic') and player.target.type == "MONSTER" then
		equip(sets.midcast.Absorb.Acc) 
		
	    if state.DisplayMode.value then update_job_states()	end
    end
end 

function job_filter_aftercast(spell, spellMap, eventArgs)
    if not spell.interrupted then
		if (spell.english == 'Drain II' or spell.english == 'Drain III') and state.DrainSwapWeaponMode.value ~= 'Never' then
			if player.equipment.main and sets.DrainWeapon and player.equipment.main == sets.DrainWeapon.main and player.equipment.main ~= sets.weapons[state.Weapons.value].main then
				equip_weaponset(state.Weapons.value)
			end
        elseif state.UseCustomTimers.value and (spell.english == 'Sleep' or spell.english == 'Sleepga') then
            send_command('@timers c "'..spell.english..' ['..spell.target.name..']" 60 down spells/00220.png')
		elseif spell.english == "Sleep II" then
            send_command('timers create "Sleep II ' ..tostring(spell.target.name).. ' " 90 down spells/00259.png')
        elseif spell.english == "Sleepga II" then
            send_command('timers create "Sleepga II ' ..tostring(spell.target.name).. ' " 90 down spells/00274.png')
        elseif spell.english == 'Impact' then
                send_command('timers create "Impact ' ..tostring(spell.target.name).. ' " 180 down spells/00502.png')
        elseif spell.english == "Bind" then
            send_command('timers create "Bind" 60 down spells/00258.png')
        elseif spell.english == "Break" then
            send_command('timers create "Break Petrification" 33 down spells/00255.png')
        elseif spell.english == "Breakga" then
            send_command('timers create "Breakga Petrification" 33 down spells/00365.png') 
		elseif spell.skill == 'Elemental Magic' and state.MagicBurstMode.value == 'Single' then
            state.MagicBurstMode:reset()
			if state.DisplayMode.value then update_job_states()	end
        end
    end
end
function job_aftercast(spell, spellMap, eventArgs)
    if not spell.interrupted then
		if (spell.english == 'Drain II' or spell.english == 'Drain III') and state.DrainSwapWeaponMode.value ~= 'Never' then
			if player.equipment.main and sets.DrainWeapon and player.equipment.main == sets.DrainWeapon.main and player.equipment.main ~= sets.weapons[state.Weapons.value].main then
				equip_weaponset(state.Weapons.value)
			end
        elseif state.UseCustomTimers.value and (spell.english == 'Sleep' or spell.english == 'Sleepga') then
            send_command('@timers c "'..spell.english..' ['..spell.target.name..']" 60 down spells/00220.png')
		elseif spell.english == "Sleep II" then
            send_command('timers create "Sleep II ' ..tostring(spell.target.name).. ' " 90 down spells/00259.png')
        elseif spell.english == "Sleepga II" then
            send_command('timers create "Sleepga II ' ..tostring(spell.target.name).. ' " 90 down spells/00274.png')
        elseif spell.english == 'Impact' then
                send_command('timers create "Impact ' ..tostring(spell.target.name).. ' " 180 down spells/00502.png')
        elseif spell.english == "Bind" then
            send_command('timers create "Bind" 60 down spells/00258.png')
        elseif spell.english == "Break" then
            send_command('timers create "Break Petrification" 33 down spells/00255.png')
        elseif spell.english == "Breakga" then
            send_command('timers create "Breakga Petrification" 33 down spells/00365.png') 
		elseif spell.skill == 'Elemental Magic' and state.MagicBurstMode.value == 'Single' then
            state.MagicBurstMode:reset()
			if state.DisplayMode.value then update_job_states()	end
        end
    end

end

-- windower.register_event('hpp change', -- code add from Aragan Asura
-- function(new_hpp,old_hpp)
--     if state.AutoReraiseMode.value and not buffactive['Reraise'] and new_hpp < 5 then
--         equip(sets.Reraise)
--     end
-- end
-- )
-- Modify the default idle set after it was constructed.
function job_customize_idle_set(idleSet)
    if player.mpp < 51 and (state.IdleMode.value == 'Normal' or state.IdleMode.value:contains('Sphere')) then
        idleSet = set_combine(idleSet, sets.latent_refresh)
    end
    if state.RP.current == 'on' then
        equip(sets.RP)
        disable('neck')
    else
        enable('neck')
    end
	if buffactive['Tactician\'s Roll'] and __rollNum == 11 then
		idleSet = set_combine(idleSet, sets.rollerRing)
	end
	if state.AutoReraiseMode.value and not buffactive['Reraise'] and (player.hpp < 5 or buffactive['doom']) then
	    idleSet = set_combine(idleSet, sets.Reraise)
    end

    return idleSet
end

-- Modify the default melee set after it was constructed.
function job_customize_melee_set(meleeSet)
    if state.Buff.Souleater and state.DefenseMode.current == 'None' then
        meleeSet = set_combine(meleeSet, sets.buff.Souleater)
    end
    if state.RP.current == 'on' then
        equip(sets.RP)
        disable('neck')
    else
        enable('neck')
    end

	if state.SubtleBlowMode.value then
		if buffactive['Auspice'] then
			state.Passive:set('SubtleBlow')
		else
			state.Passive:set('SubtleBlowMBOZE')
			-- meleeSet = set_combine(meleeSet, sets.passive.SubtleBlowMBOZE)
		end

		handle_equipping_gear(player.status)

		if state.DisplayMode.value then update_job_states()	end
	end
	if state.AutoReraiseMode.value and not buffactive['Reraise'] and (player.hpp < 5 or buffactive['doom'] or buffactive['weakness']) then
	    meleeSet = set_combine(meleeSet, sets.Reraise)
    end
    return meleeSet
end

function job_customize_defense_set(defenseSet)
	if state.AutoReraiseMode.value and not buffactive['Reraise'] and (player.hpp < 5 or buffactive['doom'] or buffactive['weakness']) then
		defenseSet = set_combine(defenseSet, sets.Reraise)
	end
    return defenseSet
end
function job_customize_passive_set(baseSet)
	if state.AutoReraiseMode.value and not buffactive['Reraise'] and (player.hpp < 5 or buffactive['doom'] or buffactive['weakness']) then
		baseSet = set_combine(baseSet, sets.Reraise)
	end
    return baseSet
end
--[[function update_combat_form()
    -- Check for H2H or single-wielding
    if player.equipment.sub == "Blurred Shield +1" or player.equipment.sub == "Beatific Shield +1" or player.equipment.sub == "Utu Grip" or 
    player.equipment.sub == "Alber Strap" or player.equipment.sub == 'empty' then
        state.CombatForm:reset()

    end

end]]
function job_state_change(stateField, newValue, oldValue)
    if state.WeaponLock.value == true then
        disable('main','sub')
    else
        enable('main','sub')
    end

end


function check_tp_mp_lower()
	local spell_recasts = windower.ffxi.get_spell_recasts()

	if spell_recasts[275] < spell_latency and silent_can_use(275) then
		windower.chat.input('/ma "Absorb-TP" <t>')
		tickdelay = os.clock() + 2
		return true
	elseif spell_recasts[247] < spell_latency and silent_can_use(247) then
		windower.chat.input('/ma "Aspir" <t>')
		tickdelay = os.clock() + 2
		return true
	else
		return false
	end
end

function job_tick()
	if check_hasso() then return true end
	if check_buff() then return true end
	if check_buffup() then return true end
	if state.AutoAbsorttpaspirSpam.value and player.in_combat and player.target.type == "MONSTER" and not moving then
		if check_tp_mp_lower() then return true end
			tickdelay = os.clock() + 1.5
		return true
	end
	return false
end
function update_combat_form()
    if DW == true then
        state.CombatForm:set('DW')
    elseif DW == false then
        state.CombatForm:reset()
    end
end
function determine_haste_group()
    -- classes.CustomMeleeGroups:clear()
    if DW == true then
        if DW_needed <= 11 then
            classes.CustomMeleeGroups:append('MaxHaste')
        elseif DW_needed > 12 and DW_needed <= 15 then
            classes.CustomMeleeGroups:append('HighHaste')
        elseif DW_needed > 15 and DW_needed <= 21 then
            classes.CustomMeleeGroups:append('MidHaste')
        elseif DW_needed > 22 and DW_needed <= 29 then
            classes.CustomMeleeGroups:append('LowHaste')
        elseif DW_needed > 29 then
            classes.CustomMeleeGroups:append('LowHaste')
        end
	end
end
function gearinfo(commandArgs, eventArgs)
    if commandArgs[1] == 'gearinfo' then
        if type(tonumber(commandArgs[2])) == 'number' then
            if tonumber(commandArgs[2]) ~= DW_needed then
            DW_needed = tonumber(commandArgs[2])
            DW = true
            end
        elseif type(commandArgs[2]) == 'string' then
            if commandArgs[2] == 'false' then
                DW_needed = 0
                DW = false
            end
        end
        if type(tonumber(commandArgs[3])) == 'number' then
            if tonumber(commandArgs[3]) ~= Haste then
                Haste = tonumber(commandArgs[3])
            end
        end
        if not midaction() then
            job_update()
        end
    end
end
function job_handle_equipping_gear(playerStatus, eventArgs)
    determine_haste_group()
	update_combat_form()
end
function job_self_command(commandArgs, eventArgs)
	gearinfo(commandArgs, eventArgs)

	if commandArgs[1]:lower() == 'elemental' then
		handle_elemental(commandArgs)
		eventArgs.handled = true			
	end
	if commandArgs[1]:lower() == 'absorbs' then
        send_command('@input /ma "'..state.Absorbs.value..'" <t>')
    end
end

-- Handling Elemental spells within Gearswap.
-- Format: gs c elemental <nuke, helix, skillchain1, skillchain2, weather>
function handle_elemental(cmdParams)
    -- cmdParams[1] == 'elemental'
    -- cmdParams[2] == ability to use

    if not cmdParams[2] then
        add_to_chat(123,'Error: No elemental command given.')
        return
    end
    local command = cmdParams[2]:lower()
	
	if command == 'spikes' then
		windower.chat.input('/ma "'..data.elements.spikes_of[state.ElementalMode.value]..' Spikes" <me>')
		return
	elseif command == 'enspell' then
		windower.chat.input('/ma "En'..data.elements.enspell_of[state.ElementalMode.value]..'" <me>')
		return
	--Leave out target, let shortcuts auto-determine it.
	elseif command == 'weather' then
		if player.sub_job == 'RDM' then
			windower.chat.input('/ma "Phalanx" <me>')
		else
			local spell_recasts = windower.ffxi.get_spell_recasts()
			if (player.target.type == 'SELF' or not player.target.in_party) and buffactive[data.elements.storm_of[state.ElementalMode.value]] and not buffactive['Klimaform'] and spell_recasts[287] < spell_latency then
				windower.chat.input('/ma "Klimaform" <me>')
			else
				windower.chat.input('/ma "'..data.elements.storm_of[state.ElementalMode.value]..'"')
			end
		end
		return
	end

	local target = '<t>'
	if cmdParams[3] then
		if tonumber(cmdParams[3]) then
			target = tonumber(cmdParams[3])
		else
			target = table.concat(cmdParams, ' ', 3)
			target = get_closest_mob_id_by_name(target) or '<t>'
		end
	end

    if command == 'nuke' then
		local spell_recasts = windower.ffxi.get_spell_recasts()
		
		if state.ElementalMode.value == 'Light' then
			if spell_recasts[29] < spell_latency and actual_cost(get_spell_table_by_name('Banish II')) < player.mp then
				windower.chat.input('/ma "Banish II" '..target..'')
			elseif spell_recasts[28] < spell_latency and actual_cost(get_spell_table_by_name('Banish')) < player.mp then
				windower.chat.input('/ma "Banish" '..target..'')
			else
				add_to_chat(123,'Abort: Banishes on cooldown or not enough MP.')
			end

		else
			if player.job_points[(res.jobs[player.main_job_id].ens):lower()].jp_spent > 99 and spell_recasts[get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..' III').id] < spell_latency and actual_cost(get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..' III')) < player.mp then
				windower.chat.input('/ma "'..data.elements.nuke_of[state.ElementalMode.value]..' III" '..target..'')
			else
				local tiers = {' III',' II',''}
				for k in ipairs(tiers) do
					if spell_recasts[get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'').id] < spell_latency and actual_cost(get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'')) < player.mp then
						windower.chat.input('/ma "'..data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'" '..target..'')
						return
					end
				end
				add_to_chat(123,'Abort: All '..data.elements.nuke_of[state.ElementalMode.value]..' nukes on cooldown or or not enough MP.')
			end
		end
			
	elseif command == 'ninjutsu' then
		windower.chat.input('/ma "'..data.elements.ninjutsu_nuke_of[state.ElementalMode.value]..': Ni" '..target..'')
			
	elseif command == 'smallnuke' then
		local spell_recasts = windower.ffxi.get_spell_recasts()
	
		local tiers = {''}
		for k in ipairs(tiers) do
			if spell_recasts[get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'').id] < spell_latency and actual_cost(get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'')) < player.mp then
				windower.chat.input('/ma "'..data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'" '..target..'')
				return
			end
		end
		add_to_chat(123,'Abort: All '..data.elements.nuke_of[state.ElementalMode.value]..' nukes on cooldown or or not enough MP.')
		
	elseif command:contains('tier') then
		local spell_recasts = windower.ffxi.get_spell_recasts()
		local tierlist = {['tier1']='',['tier2']=' II',['tier3']=' III'}
		
		windower.chat.input('/ma "'..data.elements.nuke_of[state.ElementalMode.value]..tierlist[command]..'" '..target..'')
		
	elseif command:contains('aga') or command == 'aja' then
		local spell_recasts = windower.ffxi.get_spell_recasts()
		local tierkey = {'aga2','aga1'}
		local tierlist = {['aga2']='ga II',['aga1']='ga',}
		if command == 'aga' then
			for i in ipairs(tierkey) do
				if spell_recasts[get_spell_table_by_name(data.elements.nukega_of[state.ElementalMode.value]..''..tierlist[tierkey[i]]..'').id] < spell_latency and actual_cost(get_spell_table_by_name(data.elements.nukega_of[state.ElementalMode.value]..''..tierlist[tierkey[i]]..'')) < player.mp then
					windower.chat.input('/ma "'..data.elements.nukega_of[state.ElementalMode.value]..''..tierlist[tierkey[i]]..'" '..target..'')
					return
				end
			end
		else
			windower.chat.input('/ma "'..data.elements.nukega_of[state.ElementalMode.value]..tierlist[command]..'" '..target..'')
		end

	elseif command == 'ara' then
		windower.chat.input('/ma "'..data.elements.nukera_of[state.ElementalMode.value]..'ra" '..target..'')
		
	elseif command == 'helix' then
		windower.chat.input('/ma "'..data.elements.helix_of[state.ElementalMode.value]..'helix" '..target..'')
	
	elseif command == 'ancientmagic' then
		windower.chat.input('/ma "'..data.elements.ancient_nuke_of[state.ElementalMode.value]..'" '..target..'')
		
	elseif command == 'ancientmagic2' then
		windower.chat.input('/ma "'..data.elements.ancient_nuke_of[state.ElementalMode.value]..' II" '..target..'')
		
	elseif command == 'enfeeble' then
		windower.chat.input('/ma "'..data.elements.elemental_enfeeble_of[state.ElementalMode.value]..'" '..target..'')
	
	elseif command == 'bardsong' then
		windower.chat.input('/ma "'..data.elements.threnody_of[state.ElementalMode.value]..' Threnody" '..target..'')
	else
        add_to_chat(123,'Unrecognized elemental command.')
    end
end


function job_update(cmdParams, eventArgs)
    update_melee_groups()

	if player.sub_job ~= 'SAM' and state.Stance.value ~= "None" then
		state.Stance:set("None")
		update_job_states()
	end
	if state.SubtleBlowMode.value then
        if not data.areas.cities:contains(world.area) and player.status ~= 'Event' then
            if player.status == 'Engaged' then
                handle_equipping_gear(player.status)
            end
        end
    end
end

function job_buff_change(buff, gain)
	update_melee_groups()
	if buff:lower() == 'auspice' then
		send_command('gs c update')
        handle_equipping_gear(player.status)
    end
	-- if state.AutoReraiseMode.value and not buffactive['Reraise']then
	-- 	if buffactive['weakness'] then
	-- 		equip(sets.Reraise)
	-- 		disable('body','head')
	-- 	else
	-- 		enable('body','head')
	-- 	end
	-- end
    if buff == "Arcane Circle " then
        if gain then  			
            send_command('input /p "Arcane Circle " [ON]')		
        else	
            send_command('input /p "Arcane Circle " [OFF]')
        end
    end
	if buff == "Soul Enslavement" then
        if gain then  			
            send_command('input /p "Soul Enslavement" [ON]')		
        else	
            send_command('input /p "Soul Enslavement" [OFF]')
        end
    end
    if buff == "Souleater" then
        if gain then  			
            send_command('input /p "Souleater" [ON]')		
        else	
            send_command('input /p "Souleater" [OFF]')
        end
    end
	if state.NeverDieMode.value or state.AutoCureMode.value then 

		if buffactive['poison'] and world.area:contains('Sortie') and (player.sub_job == 'SCH' or player.sub_job == 'WHM') and spell_recasts[14] < spell_latency then 
			windower.chat.input('/ma "Poisona" <me>')
			tickdelay = os.clock() + 1.1
			
		end
	end
	if state.AutoMedicineMode.value == true then
		if buff == "Defense Down" then
			if gain then  			
				send_command('input /item "Panacea" <me>')
			end
		elseif buff == "Magic Def. Down" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Max HP Down" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Evasion Down" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Magic Evasion Down" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Dia" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end  
		elseif buff == "Bio" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Bind" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Slow" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "weight" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Attack Down" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Accuracy Down" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		end
	
		if buff == "VIT Down" then
			if gain then
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "INT Down" then
			if gain then
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "MND Down" then
			if gain then
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "STR Down" then
			if gain then
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "AGI Down" then
			if gain then
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "paralysis" then
			if gain then  
				send_command('input /item "remedy" <me>')
			end
		end
		if not midaction() then
			job_update()
		end
	end
end
	
function update_melee_groups()
    classes.CustomMeleeGroups:clear()
	
    if data.areas.adoulin:contains(world.area) and buffactive.Ionis then
		classes.CustomMeleeGroups:append('Adoulin')
    end
	
	if player.equipment.main == "Liberator" and state.OffenseMode.value == "Normal" and (buffactive['Aftermath: Lv.3'] or buffactive['Aftermath: Lv.1']) then
		classes.CustomMeleeGroups:append('AM')
	end
	--[[if (player.sub_job ~= 'NIN' and player.sub_job ~= 'DNC')  then
        state.CombatForm:set("SW")
		equip(sets.DefaultShield)
	end]]

end

function check_hasso()
if player.sub_job == 'SAM' and player.status == 'Engaged' and not (state.Stance.value == 'None' or state.Buff.Hasso or state.Buff.Seigan or state.Buff['SJ Restriction'] or main_weapon_is_one_handed() or silent_check_amnesia()) then
		
		local abil_recasts = windower.ffxi.get_ability_recasts()
		
		if state.Stance.value == 'Hasso' and abil_recasts[138] < latency then
			windower.chat.input('/ja "Hasso" <me>')
			tickdelay = os.clock() + 1.1
			return true
		elseif state.Stance.value == 'Hasso' and buffactive['Last Resort'] then
			send_command('@wait .5;cancel "Last Resort"')
		    tickdelay = os.clock() + 1.1
		    return true
		elseif state.Stance.value == 'Seigan' and abil_recasts[139] < latency then
			windower.chat.input('/ja "Seigan" <me>')
			tickdelay = os.clock() + 1.1
			return true
		else
			return false
		end
	end

	return false
end

buff_activation_time = nil
last_auto_buff_mode = nil

function check_buff()
	if last_auto_buff_mode ~= state.AutoBuffMode.value then
        buff_activation_time = os.clock()
        last_auto_buff_mode = state.AutoBuffMode.value
        return false
    end

	--Does not work until seconds add after the last change
	if not buff_activation_time or os.clock() - buff_activation_time < 3 then
        return false
    end
	
	if state.AutoBuffMode.value ~= 'Off' and not data.areas.cities:contains(world.area) then
		local spell_recasts = windower.ffxi.get_spell_recasts()
		for i in pairs(buff_spell_lists[state.AutoBuffMode.Value]) do
			if not buffactive[buff_spell_lists[state.AutoBuffMode.Value][i].Buff] and (buff_spell_lists[state.AutoBuffMode.Value][i].When == 'Always' or (buff_spell_lists[state.AutoBuffMode.Value][i].When == 'Combat' and (player.in_combat or being_attacked)) or (buff_spell_lists[state.AutoBuffMode.Value][i].When == 'Engaged' and player.status == 'Engaged') or (buff_spell_lists[state.AutoBuffMode.Value][i].When == 'Idle' and player.status == 'Idle') or (buff_spell_lists[state.AutoBuffMode.Value][i].When == 'OutOfCombat' and not (player.in_combat or being_attacked))) and spell_recasts[buff_spell_lists[state.AutoBuffMode.Value][i].SpellID] < latency and silent_can_use(buff_spell_lists[state.AutoBuffMode.Value][i].SpellID) then
				windower.chat.input('/ma "'..buff_spell_lists[state.AutoBuffMode.Value][i].Name..'" <me>')
				tickdelay = os.clock() + 2
				return true
			end
		end
		
		if state.AutoBuffMode.value == 'Auto' and (player.in_combat or player.status == 'Engaged') then
			local abil_recasts = windower.ffxi.get_ability_recasts()

			if not buffactive['Last Resort'] and abil_recasts[87] < latency then
				windower.chat.input('/ja "Last Resort" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif not buffactive['Scarlet Delirium'] and abil_recasts[44] < latency then
				windower.chat.input('/ja "Scarlet Delirium" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif player.sub_job == 'WAR' and not buffactive.Berserk and abil_recasts[1] < latency then
				windower.chat.input('/ja "Berserk" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif player.sub_job == 'WAR' and not buffactive.Aggressor and abil_recasts[4] < latency then
				windower.chat.input('/ja "Aggressor" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif player.sub_job == 'WAR' and not buffactive.Warcry and abil_recasts[2] < latency then
				windower.chat.input('/ja "Warcry" <me>')
				tickdelay = os.clock() + 1.1
				return true
			else
				return false
			end
		end
		if state.AutoBuffMode.value == 'Sortie' and (player.in_combat or player.status == 'Engaged') then
			local abil_recasts = windower.ffxi.get_ability_recasts()

		   if buffactive['Last Resort'] then
			    send_command('@wait .5;cancel "Last Resort"')
			    tickdelay = os.clock() + 1.1
			    return true
			elseif not buffactive['Scarlet Delirium'] and abil_recasts[44] < latency then
				windower.chat.input('/ja "Scarlet Delirium" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif player.sub_job == 'WAR' and not buffactive.Berserk and abil_recasts[1] < latency then
				windower.chat.input('/ja "Berserk" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif player.sub_job == 'WAR' and not buffactive.Aggressor and abil_recasts[4] < latency then
				windower.chat.input('/ja "Aggressor" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif player.sub_job == 'WAR' and not buffactive.Warcry and abil_recasts[2] < latency then
				windower.chat.input('/ja "Warcry" <me>')
				tickdelay = os.clock() + 1.1
				return true
			else
				return false
			end
		end
		
		if state.AutoBuffMode.value == 'Full' and (player.in_combat or player.status == 'Engaged') then
			local abil_recasts = windower.ffxi.get_ability_recasts()

			if not buffactive['Last Resort'] and abil_recasts[87] < latency then
				windower.chat.input('/ja "Last Resort" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif not buffactive['Hasso'] and abil_recasts[138] < latency then
				windower.chat.input('/ja "Hasso" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif not buffactive.Souleater and abil_recasts[85] < latency then
				windower.chat.input('/ja "Souleater" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif not buffactive['Diabolic Eye'] and abil_recasts[90] < latency then
				windower.chat.input('/ja "Diabolic Eye" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif not buffactive['Scarlet Delirium'] and abil_recasts[44] < latency then
				windower.chat.input('/ja "Scarlet Delirium" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif player.sub_job == 'WAR' and not buffactive.Berserk and abil_recasts[1] < latency then
				windower.chat.input('/ja "Berserk" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif player.sub_job == 'WAR' and not buffactive.Aggressor and abil_recasts[4] < latency then
				windower.chat.input('/ja "Aggressor" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif player.sub_job == 'WAR' and not buffactive.Warcry and abil_recasts[2] < latency then
				windower.chat.input('/ja "Warcry" <me>')
				tickdelay = os.clock() + 1.1
				return true
			else
				return false
			end
		end

		if state.AutoBuffMode.value == 'Defend' and (player.in_combat or player.status == 'Engaged') and player.sub_job == 'WAR' then

			local abil_recasts = windower.ffxi.get_ability_recasts()
	
			if buffactive['Last Resort'] then
				send_command('@wait .5;cancel "Last Resort"')
				tickdelay = os.clock() + 1.1
				return true
			elseif buffactive.Berserk then
				send_command('@wait .5;cancel Berserk')
				tickdelay = os.clock() + 1.1
				return true
			elseif not buffactive.Defender and abil_recasts[3] < latency then
				windower.chat.input('/ja "Defender" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif not buffactive['Scarlet Delirium'] and abil_recasts[44] < latency then
				windower.chat.input('/ja "Scarlet Delirium" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif not buffactive.Warcry and abil_recasts[2] < latency then
				windower.chat.input('/ja "Warcry" <me>')
				tickdelay = os.clock() + 1.1
				return true
			else
				return false
			end
		end
	end
	return false
end

function check_buffup()
	if buffup ~= '' then
		local needsbuff = false
		for i in pairs(buff_spell_lists[buffup]) do
			if not buffactive[buff_spell_lists[buffup][i].Buff] and silent_can_use(buff_spell_lists[buffup][i].SpellID) then
				needsbuff = true
				break
			end
		end
	
		if not needsbuff then
			add_to_chat(217, 'All '..buffup..' buffs are up!')
			buffup = ''
			return false
		end
		
		local spell_recasts = windower.ffxi.get_spell_recasts()
		
		for i in pairs(buff_spell_lists[buffup]) do
			if not buffactive[buff_spell_lists[buffup][i].Buff] and silent_can_use(buff_spell_lists[buffup][i].SpellID) and spell_recasts[buff_spell_lists[buffup][i].SpellID] < spell_latency then
				windower.chat.input('/ma "'..buff_spell_lists[buffup][i].Name..'" <me>')
				tickdelay = os.clock() + 2
				return true
			end
		end
		
		return false
	else
		return false
	end
end


windower.register_event('incoming text',function(org)     

	--Seductive Radiance Beguiling Radiance Maddening Radiance Provenance Watcher Voidwatch nm

	if string.find(org, "Tabbiyaa Gambit") then
		-- state.weapons:('ProcScytheTwilight')
		send_command('gs c weapons ProcScytheTwilight;gs c update')
	end
	--Sortie 	--Vagary
	if string.find(org, "Flaming Kick") or string.find(org, "Demonfire") then
		windower.send_command('gs c set ElementalMode water')
	end
	if string.find(org, "Flashflood") or string.find(org, "Torrential Pain") then
		windower.send_command('gs c set ElementalMode Lightning')
	end
	if string.find(org, "Icy Grasp") or string.find(org, "Frozen Blood") then
		windower.send_command('gs c set ElementalMode Fire')
	end
	if string.find(org, "Eroding Flesh") or string.find(org, "Ensepulcher") then
		windower.send_command('gs c set ElementalMode Wind')
	end
	if string.find(org, "Fulminous Smash") or string.find(org, "Ceaseless Surge") then
		windower.send_command('gs c set ElementalMode Earth')
	end
	if string.find(org, "Blast of Reticence") then
		windower.send_command('gs c set ElementalMode Ice')
	end

	-----------

	if string.find(org, "Aita readies Vivisection") then
		windower.chat.input('/ja "Soul Enslavement" <me>')
		state.MagicalDefenseMode:set('MDT')
        windower.send_command('wait 5;gs c set MagicalDefenseMode OFF')
		windower.send_command('input /p Aita uses Vivisection <call14>!')  -- code add by (Aragan@Asura)
	end
	-- if string.find(org, "Degei readies Vivisection") then
	-- 	windower.chat.input('/ja "Soul Enslavement" <me>')
	-- 	state.MagicalDefenseMode:set('MDT')
    --     windower.send_command('wait 5;gs c set MagicalDefenseMode OFF')
	-- 	windower.send_command('input /p Degei uses Vivisection <call14>!')  -- code add by (Aragan@Asura)
	-- end
	-- if string.find(org, "Triboulex readies Setting the Stage") then
	-- 	windower.chat.input('/ja "Soul Enslavement" <me>')
	-- 	state.MagicalDefenseMode:set('MDT')
    --     windower.send_command('wait 5;gs c set MagicalDefenseMode OFF')
	-- 	windower.send_command('input /p Triboulex uses Setting the Stage <call14>!')  -- code add by (Aragan@Asura)
	-- end
	-- if string.find(org, "Skomora readies Setting the Stage") then
	-- 	windower.chat.input('/ja "Soul Enslavement" <me>')
	-- 	state.MagicalDefenseMode:set('MDT')
    --     windower.send_command('wait 5;gs c set MagicalDefenseMode OFF')
	-- 	windower.send_command('input /p Skomora uses Setting the Stage <call14>!')  -- code add by (Aragan@Asura)
	-- end
	if string.find(org, "Chokehold") then
		windower.send_command('gs c set ElementalMode Ice')
	end
	if string.find(org, "Flaming Kick") or string.find(org, "Demonfire") then
		windower.send_command('gs c set ElementalMode water')
	end
	if string.find(org, "Flashflood") or string.find(org, "Torrential Pain") then
		windower.send_command('gs c set ElementalMode Lightning')
	end
	if string.find(org, "Icy Grasp") or string.find(org, "Frozen Blood") then
		windower.send_command('gs c set ElementalMode Fire')

	end
	if string.find(org, "Eroding Flesh") or string.find(org, "Ensepulcher") then
		windower.send_command('gs c set ElementalMode Wind')

	end
	if string.find(org, "Fulminous Smash") or string.find(org, "Ceaseless Surge") then
		windower.send_command('gs c set ElementalMode Earth')

	end
	if string.find(org, "Blast of Reticence") then
		windower.send_command('gs c set ElementalMode Ice')
	end
	
end)


buff_spell_lists = {
	Auto = {	
		{Name='Dread Spikes',Buff='Dread Spikes',SpellID=277,When='Combat'},
	},
	Sortie = {	
		{Name='Dread Spikes',Buff='Dread Spikes',SpellID=277,When='Combat'},
	},
	Defend = {	
		{Name='Dread Spikes',Buff='Dread Spikes',SpellID=277,When='Combat'},
	},
	Default = {
		{Name='Dread Spikes',Buff='Dread Spikes',SpellID=277,Reapply=false},
	},
}


function job_zone_change(new_id,old_id)
	--tickdelay = os.clock() + 10	
	current_zone = windower.ffxi.get_info().zone
	if data.areas.cities:contains(world.area)  then
		send_command('wait 10;gs c set DefenseMode Physical;gs c set PhysicalDefenseMode SEboost') --Turns addon on hide show off some no need in city on screen.
	end
end


-- zombie_last_check = 0

-- windower.register_event('prerender', function()
--     local now = os.clock()
--     if now - zombie_last_check > 1 then -- كل 1 ثانية
--         zombie_last_check = now

-- 		if state.AutoReraiseMode.value and not buffactive['Reraise'] and (player.hpp < 5 or buffactive['doom']) then
-- 			equip(sets.Reraise)
-- 			send_command('gs c update') -- يجبر GearSwap يعيد فحص الشروط وتطبيق Zombie gear
--         end
--     end
-- end)


-- function user_job_target_change(target)  
-- 	local already_announced_by_name = already_announced_by_name or {}
-- 	local target = windower.ffxi.get_mob_by_target('t')
-- 	local sub = windower.ffxi.get_mob_by_target('st')

--     if state.AutoinfoNMMode.value and target ~= nil and sub == nil then

--         if target.name == "Dhartok" and not already_announced_by_name[target.name] then
-- 			already_announced_by_name[target.name] = true

-- 			-- windower.chat.input('/p >>> '..auto_translate('Rayke')..''..auto_translate(target.name)..' ['..target.name..'] Wind hand: 70% Ice, Thunder hand: 70% Earth. Only Ice damage effective.')
-- 			windower.send_command('input /echo ['..target.name..'] HP ~1,620,000  MP:have EVA 1,581  M.DEF 100 INT: 363 MND: 338  / Wind hand USE Gelus .. Wind hand: 70% Ice, Thunder hand: 70% Earth. Only Ice damage effective.')
-- 		end
--         -- if (target.name == "Ironshell" or target.name == "Ghast") and not already_announced_by_name[target.name] then
-- 		-- 	already_announced_by_name[target.name] = true

-- 		-- 	windower.chat.input('/p >>> '..auto_translate('Rayke')..''..auto_translate(target.name)..' ['..target.name..'] Wind hand: 70% Ice, Thunder hand: 70% Earth. Only Ice damage effective.')
-- 		-- 	windower.send_command('input /echo ['..target.name..'] RUN Thunder hand USE Tellus / Wind hand USE Gelus .. Wind hand: 70% Ice, Thunder hand: 70% Earth. Only Ice damage effective.')
-- 		-- end
-- 	end
-- end
