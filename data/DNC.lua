--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- __________.__                                ________                          __               .__.__  __      __  .__    .__           _____.__.__              
-- \______   |  |   ____ _____    ______ ____   \______ \   ____     ____   _____/  |_    ____   __| _|___/  |_  _/  |_|  |__ |__| ______ _/ ____|__|  |   ____      
--  |     ___|  | _/ __ \\__  \  /  ____/ __ \   |    |  \ /  _ \   /    \ /  _ \   __\ _/ __ \ / __ ||  \   __\ \   __|  |  \|  |/  ___/ \   __\|  |  | _/ __ \     
--  |    |   |  |_\  ___/ / __ \_\___ \\  ___/   |    `   (  <_> ) |   |  (  <_> |  |   \  ___// /_/ ||  ||  |    |  | |   Y  |  |\___ \   |  |  |  |  |_\  ___/     
--  |____|   |____/\___  (____  /____  >\___  > /_______  /\____/  |___|  /\____/|__|    \___  \____ ||__||__|    |__| |___|  |__/____  >  |__|  |__|____/\___  > /\ 
--                     \/     \/     \/     \/          \/              \/                   \/     \/                      \/        \/                      \/  \/ 
--
--	Please do not edit this file!							Please do not edit this file!							Please do not edit this file!
--
--	Editing this file will cause you to be unable to use Github Desktop to update!
--
--	Any changes you wish to make in this file you should be able to make by overloading. That is Re-Defining the same variables or functions in another file, by copying and
--	pasting them to a file that is loaded after the original file, all of my library files, and then job files are loaded first.
--	The last files to load are the ones unique to you. User-Globals, Charactername-Globals, Charactername_Job_Gear, in that order, so these changes will take precedence.
--
--	You may wish to "hook" into existing functions, to add functionality without losing access to updates or fixes I make, for example, instead of copying and editing
--	status_change(), you can instead use the function user_status_change() in the same manner, which is called by status_change() if it exists, most of the important 
--  gearswap functions work like this in my files, and if it's unique to a specific job, user_job_status_change() would be appropriate instead.
--
--  Variables and tables can be easily redefined just by defining them in one of the later loaded files: autofood = 'Miso Ramen' for example.
--  States can be redefined as well: state.HybridMode:options('Normal','PDT') though most of these are already redefined in the gear files for editing there.
--	Commands can be added easily with: user_self_command(commandArgs, eventArgs) or user_job_self_command(commandArgs, eventArgs)
--
--	If you're not sure where is appropriate to copy and paste variables, tables and functions to make changes or add them:
--		User-Globals.lua - 			This file loads with all characters, all jobs, so it's ideal for settings and rules you want to be the same no matter what.
--		Charactername-Globals.lua -	This file loads with one character, all jobs, so it's ideal for gear settings that are usable on all jobs, but unique to this character.
--		Charactername_Job_Gear.lua-	This file loads only on one character, one job, so it's ideal for things that are specific only to that job and character.
--
--
--	If you still need help, feel free to contact me on discord or ask in my chat for help: https://discord.gg/ug6xtvQ
--  !Please do NOT message me in game about anything third party related, though you're welcome to message me there and ask me to talk on another medium.
--
--  Please do not edit this file!							Please do not edit this file!							Please do not edit this file!
-- __________.__                                ________                          __               .__.__  __      __  .__    .__           _____.__.__              
-- \______   |  |   ____ _____    ______ ____   \______ \   ____     ____   _____/  |_    ____   __| _|___/  |_  _/  |_|  |__ |__| ______ _/ ____|__|  |   ____      
--  |     ___|  | _/ __ \\__  \  /  ____/ __ \   |    |  \ /  _ \   /    \ /  _ \   __\ _/ __ \ / __ ||  \   __\ \   __|  |  \|  |/  ___/ \   __\|  |  | _/ __ \     
--  |    |   |  |_\  ___/ / __ \_\___ \\  ___/   |    `   (  <_> ) |   |  (  <_> |  |   \  ___// /_/ ||  ||  |    |  | |   Y  |  |\___ \   |  |  |  |  |_\  ___/     
--  |____|   |____/\___  (____  /____  >\___  > /_______  /\____/  |___|  /\____/|__|    \___  \____ ||__||__|    |__| |___|  |__/____  >  |__|  |__|____/\___  > /\ 
--                     \/     \/     \/     \/          \/              \/                   \/     \/                      \/        \/                      \/  \/ 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
-- Setup functions for this job.  Generally should not be modified.
-------------------------------------------------------------------------------------------------------------------

--[[
    Custom commands:
    
    gs c step
        Uses the currently configured step on the target, with either <t> or <stnpc> depending on setting.

    gs c step t
        Uses the currently configured step on the target, but forces use of <t>.
    
    
    Configuration commands:
    
    gs c cycle mainstep
        Cycles through the available steps to use as the primary step when using one of the above commands.
        
    gs c cycle altstep
        Cycles through the available steps to use for alternating with the configured main step.
        
    gs c toggle usealtstep
        Toggles whether or not to use an alternate step.

--]]


-- Initialization function for this job file.
function get_sets()
    -- Load and initialize the include file.
    include('Sel-Include.lua')

	organizer_items = {   
		"Airmid's Gorget",     
		"Gyudon",
		"Reraiser",
		"Hi-Reraiser",
		"Vile Elixir",
		"Vile Elixir +1",
		"Miso Ramen",
		"Carbonara",
		"Silent Oil",
		"Salt Ramen",
		"Panacea",
		"Sublime Sushi",
		"Sublime Sushi 1+",
		"Prism Powder",
		"Antacid",
		"Icarus Wing",
		"Warp Cudgel",
		"Holy Water",
		"Sanjaku-Tenugui",
		"Shinobi-Tabi",
		"Shihei",
		"Remedy",
		"Emporox's Ring",
		"Red Curry Bun",
		"Instant Reraise",
		"Black Curry Bun",
		"Rolan. Daifuku",
		"Reraise Earring",}
end


-- Setup vars that are user-independent.  state.Buff vars initialized here will automatically be tracked.
function job_setup()
    send_command('lua l DNC-hud')
    --auto equip to PDL ws set is higher than this value .. this value for all job and u can add any value in any job lua . (Aragan@Asura)
    attack2 = 4000 -- This LUA will equip PDL "high buff" WS sets if the attack value of your TP set (or idle set if WSing from idle) is higher than this value.

    state.Buff['Climactic Flourish'] = buffactive['Climactic Flourish'] or false
	state.Buff['Building Flourish'] = buffactive['Building Flourish'] or false
	state.Buff['Presto'] = buffactive['Presto'] or false
	state.Buff['Contradance'] = buffactive['Contradance'] or false
	state.Buff['Saber Dance'] = buffactive['Saber Dance'] or false
	state.Buff['Fan Dance'] = buffactive['Fan Dance'] or false
	state.Buff['Aftermath: Lv.3'] = buffactive['Aftermath: Lv.3'] or false
	state.MaintainAftermath	  = M(true, 'Maintain Aftermath')

    state.MainStep = M{['description']='Main Step1', 'Box Step','Quickstep','Feather Step','Stutter Step'}
    state.AltStep = M{['description']='Alt Step', 'Feather Step','Quickstep','Stutter Step','Box Step'}
    state.UseAltStep = M(false, 'Use Alt Step')
    state.CurrentStep = M{['description']='Current Step', 'Main', 'Alt'}
    state.SelectStepTarget = M(false, 'Select Step Target')

	state.AutoPrestoMode = M(true, 'Auto Presto Mode')
	state.DanceStance = M{['description']='Dance Stance','None','Saber Dance','Fan Dance'}
	state.RefineWaltz		  = M(false, 'RefineWaltz')
	state.AutoCureMode = M(true, 'Auto Cure Mode')
	state.AutoBuilding = M(false, 'Auto Building Flourish Mode')


	autows = "Rudra's Storm"
	autofood = 'Soy Ramen'
	
	function calculate_step_feet_reduction()
		local tp_reduction = 0
		
		if sets.precast.Step and sets.precast.Step.feet and standardize_set(sets.precast.Step).feet:startswith('Horos T. Shoes') then
			if sets.precast.Step.feet:endswith('+2') then
				tp_reduction = 10
			elseif sets.precast.Step.feet:endswith('+3') then
				tp_reduction = 20
			end
		end
		
		return tp_reduction 
	end

	step_feet_reduction = calculate_step_feet_reduction()
	
    update_melee_groups()
	init_job_states({"Capacity","AutoRuneMode","AutoTrustMode","AutoWSMode","AutoShadowMode","AutoFoodMode","AutoStunMode","AutoDefenseMode","AutoMedicineMode",},{"AutoBuffMode","AutoSambaMode","Weapons","OffenseMode","WeaponskillMode","IdleMode","DanceStance","MainStep","AltStep","CurrentStep","Passive","RuneElement","TreasureMode",})
end

-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for standard casting events.
-------------------------------------------------------------------------------------------------------------------
-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
-- Set eventArgs.useMidcastGear to true if we want midcast gear equipped on precast.

function job_filtered_action(spell, eventArgs)

end
function job_filtered_pretarget(spell, action, spellMap, eventArgs)

end
-- Automatically use Presto for steps when it's available and we have less than 3 finishing moves
function job_pretarget(spell, action, spellMap, eventArgs)
    if spell.type == 'Step' then
        local allRecasts = windower.ffxi.get_ability_recasts()
        local prestoCooldown = allRecasts[236]
        local under3FMs = not buffactive['Finishing Move 3'] and not buffactive['Finishing Move 4'] and not buffactive['Finishing Move 5']

        --local under3FMs = not buffactive['Finishing Move 3'] and not buffactive['Finishing Move 4'] and not buffactive['Finishing Move 5']
        
        if player.main_job_level >= 77 and prestoCooldown < 1 and under3FMs then
            cast_delay(1.1)
            send_command('@input /ja "Presto" <me>')
			send_command('input /p "'..spell.english..'" '..spell.target.raw..'')

        end
        if not midaction() then
            job_update()
        end
    end
end
function job_precast(spell, spellMap, eventArgs)

	if spell.type == 'WeaponSkill' and state.AutoBuffMode.value ~= 'Off' and player.tp > (999 + step_cost()) then
		local abil_recasts = windower.ffxi.get_ability_recasts()
		if under3FMs() and abil_recasts[220] < latency and (abil_recasts[236] < latency or state.Buff['Presto']) and player.status == 'Engaged' then
			eventArgs.cancel = true
			windower.send_command('gs c step')
			windower.chat.input:schedule(2.3,'/ws "'..spell.english..'" '..spell.target.raw..'')
			tickdelay = os.clock() + 4.3
			return
		elseif not under3FMs() and not state.Buff['Building Flourish'] and abil_recasts[226] < latency then
			eventArgs.cancel = true
			windower.chat.input('/ja "Climactic Flourish" <me>')
			windower.chat.input:schedule(1,'/ws "'..spell.english..'" '..spell.target.raw..'')
			tickdelay = os.clock() + 1.25
			return
		elseif state.AutoBuilding.value and not under3FMs() and not state.Buff['Climactic Flourish'] and not state.Buff['Presto'] and abil_recasts[222] < latency and player.status == 'Engaged' then
			eventArgs.cancel = true
			windower.chat.input('/ja "Building Flourish" <me>')
			windower.chat.input:schedule(1.6,'/ws "'..spell.english..'" '..spell.target.raw..'')
			tickdelay = os.clock() + 2.8
			return
		end
		elseif not under3FMs() and not state.Buff['Climactic Flourish'] and abil_recasts[222] < latency then
			eventArgs.cancel = true
			windower.chat.input('/ja "Building Flourish" <me>')
			windower.chat.input:schedule(1,'/ws "'..spell.english..'" '..spell.target.raw..'')
			tickdelay = os.clock() + 1.25
			return
		elseif player.sub_job == 'SAM' and not state.Buff['SJ Restriction'] and player.tp > 1850 and abil_recasts[140] < latency then
			eventArgs.cancel = true
			windower.chat.input('/ja "Sekkanoki" <me>')
			windower.chat.input:schedule(1,'/ws "'..spell.english..'" '..spell.target.raw..'')
			tickdelay = os.clock() + 1.25
			return
		elseif player.sub_job == 'SAM' and not state.Buff['SJ Restriction'] and abil_recasts[134] < latency then
			eventArgs.cancel = true
			windower.chat.input('/ja "Meditate" <me>')
			windower.chat.input:schedule(1,'/ws "'..spell.english..'" '..spell.target.raw..'')
			tickdelay = os.clock() + 1.25
			return
		end
    end
end
function job_filter_precast(spell, spellMap, eventArgs)
	if spell.type == 'WeaponSkill' and state.AutoBuffMode.value ~= 'Off' and player.tp > (999 + step_cost()) then
		local abil_recasts = windower.ffxi.get_ability_recasts()
		if under3FMs() and abil_recasts[220] < latency and (abil_recasts[236] < latency or state.Buff['Presto']) and player.status == 'Engaged' then
			eventArgs.cancel = true
			windower.send_command('gs c step')
			windower.chat.input:schedule(2.3,'/ws "'..spell.english..'" '..spell.target.raw..'')

			tickdelay = os.clock() + 4.3
			return
		elseif not under3FMs() and not state.Buff['Building Flourish'] and abil_recasts[226] < latency then
			eventArgs.cancel = true
			windower.chat.input('/ja "Climactic Flourish" <me>')
			windower.chat.input:schedule(1,'/ws "'..spell.english..'" '..spell.target.raw..'')
			tickdelay = os.clock() + 1.25
			return
		elseif not under3FMs() and not state.Buff['Climactic Flourish'] and abil_recasts[222] < latency then
			eventArgs.cancel = true
			windower.chat.input('/ja "Building Flourish" <me>')
			windower.chat.input:schedule(1,'/ws "'..spell.english..'" '..spell.target.raw..'')
			tickdelay = os.clock() + 1.25
			return
		elseif player.sub_job == 'SAM' and not state.Buff['SJ Restriction'] and player.tp > 1850 and abil_recasts[140] < latency then
			eventArgs.cancel = true
			windower.chat.input('/ja "Sekkanoki" <me>')
			windower.chat.input:schedule(1,'/ws "'..spell.english..'" '..spell.target.raw..'')
			tickdelay = os.clock() + 1.25
			return
		elseif player.sub_job == 'SAM' and not state.Buff['SJ Restriction'] and abil_recasts[134] < latency then
			eventArgs.cancel = true
			windower.chat.input('/ja "Meditate" <me>')
			windower.chat.input:schedule(1,'/ws "'..spell.english..'" '..spell.target.raw..'')
			tickdelay = os.clock() + 1.25
			return
		end
    elseif spell.type == 'Step' and player.main_job_level >= 77 and state.AutoPrestoMode.value and player.tp > 99 and player.status == 'Engaged' and under3FMs() then
        local abil_recasts = windower.ffxi.get_ability_recasts()

        if abil_recasts[236] < latency and abil_recasts[220] < latency then
            eventArgs.cancel = true
			windower.chat.input('/ja "Presto" <me>')
			windower.chat.input:schedule(1.1,'/ja "'..spell.english..'" '..spell.target.raw..' ')

        end
    end
end
function job_post_precast(spell, spellMap, eventArgs)
	if spell.type == 'WeaponSkill' then
		local WSset = standardize_set(get_precast_set(spell, spellMap))
		local wsacc = check_ws_acc()
		
		if (WSset.ear1 == "Moonshade Earring" or WSset.ear2 == "Moonshade Earring") then
			-- Replace Moonshade Earring if we're at cap TP
			if get_effective_player_tp(spell, WSset) >= 3000 then
				if wsacc:contains('Acc') and not buffactive['Sneak Attack'] and sets.AccMaxTP then
					equip(sets.AccMaxTP[spell.english] or sets.AccMaxTP)
				elseif sets.MaxTP then
					equip(sets.MaxTP[spell.english] or sets.MaxTP)
				else
				end
			end
		end
--[[
		if state.Buff['Building Flourish'] and sets.buff['Building Flourish'] then
			equip(sets.buff['Building Flourish'])
		end

        if state.Buff['Climactic Flourish'] and sets.buff['Climactic Flourish'] then
            equip(sets.buff['Climactic Flourish'])
        end
		]]

		if spell.type == 'WeaponSkill' and state.WeaponskillMode.value == 'SubtleBlow' then
			equip(sets.precast.WS.SubtleBlow)
		end
		--[[ ]
		attack = player.attack -- auto equip to PDL ws set - code add by kastra,modi.(Aragan@Asura)
	
		if spell.type == 'WeaponSkill' then
			if state.WeaponskillMode.value == 'SubtleBlow' and (attack > attack2 or attack < attack2) then
				equip(sets.precast.WS.SubtleBlow)
			elseif state.WeaponskillMode.value == 'Proc' then
				equip(sets.precast.WS[spell.name].Proc)
			elseif buffactive["Climactic Flourish"] and attack > attack2 then
				equip(sets.precast.WS[spell.name].PDL.Clim)
			elseif attack > attack2 then
				equip(sets.precast.WS[spell.name].PDL)
			else
				equip(sets.precast.WS[spell.name])
			end
		end
		]]
		if buffactive["Climactic Flourish"] and spell.type == 'WeaponSkill' and not data.weaponskills.elemental:contains(spell.name) then
            if state.WeaponskillMode.value == 'PDL' then
                equip(sets.precast.WS.PDL.Clim)
            elseif state.WeaponskillMode.value ~= 'PDL' then
                equip(sets.precast.WS.Clim)
            end
        end
	end
end

-- Return true if we handled the aftercast work.  Otherwise it will fall back
-- to the general aftercast() code in Mote-Include.
function job_aftercast(spell, spellMap, eventArgs)
    -- Lock feet after using Mana Wall.
    if not spell.interrupted then
		if spell.type == 'WeaponSkill' and state.Buff['Climactic Flourish'] and not under3FMs() and player.tp < 999 then
			local abil_recasts = windower.ffxi.get_ability_recasts()
			if abil_recasts[222] < latency then
				windower.chat.input:schedule(1.5,'/ja "Reverse Flourish" <me>')
			end
		elseif state.UseAltStep.value and spell.english == state[state.CurrentStep.current..'Step'].current then
			state.CurrentStep:cycle()
		end
    end
end
function job_filter_aftercast(spell, spellMap, eventArgs)
	-- Lock feet after using Mana Wall.
	if not spell.interrupted then
		if spell.type == 'WeaponSkill' and state.Buff['Climactic Flourish'] and not under3FMs() and player.tp < 999 then
			local abil_recasts = windower.ffxi.get_ability_recasts()
			if abil_recasts[222] < latency then
				windower.chat.input:schedule(1.5,'/ja "Reverse Flourish" <me>')
			end
		elseif state.UseAltStep.value and spell.english == state[state.CurrentStep.current..'Step'].current then
			state.CurrentStep:cycle()
		end
	end
end
-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for non-casting events.
-------------------------------------------------------------------------------------------------------------------

-- Called when a player gains or loses a buff.
-- buff == buff gained or lost
-- gain == true if the buff was gained, false if it was lost.
function job_buff_change(buff,gain)
	update_melee_groups()

	local abil_recasts = windower.ffxi.get_ability_recasts()
	local spell_recasts = windower.ffxi.get_spell_recasts()

    if player.tp > 200 and abil_recasts[215] < latency and (buffactive['poison'] or buffactive['slow'] or buffactive['Rasp'] 
	    or buffactive['Dia'] or buffactive['Defense Down'] or buffactive['Magic Def. Down'] or buffactive['Max HP Down']
	    or buffactive['Evasion Down'] == "Evasion Down" or buffactive['Magic Evasion Down'] or buffactive['Bio'] or buffactive['Bind']
	    or buffactive['weight'] or buffactive['Attack Down'] or buffactive['Accuracy Down'] or buffactive['VIT Down']
	    or buffactive['INT Down'] or buffactive['MND Down'] or buffactive['STR Down'] or buffactive['AGI Down']) then		
	        windower.send_command('input /ja Healing Waltz <me>')
	        tickdelay = os.clock() + 1.1
		return
	end
	if state.NeverDieMode.value or state.AutoCureMode.value then 

		if buffactive['poison'] and world.area:contains('Sortie') and (player.sub_job == 'SCH' or player.sub_job == 'WHM') and spell_recasts[14] < spell_latency then 
			windower.chat.input('/ma "Poisona" <me>')
			tickdelay = os.clock() + 1.1
			
		end
	end
	if state.AutoMedicineMode.value == true then
		if buff == "Defense Down" then
			if gain then  			
				send_command('input /item "Panacea" <me>')
			end
		elseif buff == "Magic Def. Down" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Max HP Down" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Evasion Down" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Magic Evasion Down" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Dia" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end  
		elseif buff == "Bio" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Bind" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "slow" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "weight" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Attack Down" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Accuracy Down" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		end
	
		if buff == "VIT Down" then
			if gain then
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "INT Down" then
			if gain then
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "MND Down" then
			if gain then
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "STR Down" then
			if gain then
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "AGI Down" then
			if gain then
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "poison" then
			if gain then  
				send_command('input /item "remedy" <me>')
			end
		end
		if not midaction() then
			job_update()
		end
	end

end
function job_status_change(newStatus, oldStatus, eventArgs)
	
	local abil_recasts = windower.ffxi.get_ability_recasts()
	local spell_recasts = windower.ffxi.get_spell_recasts()

	if state.NeverDieMode.value or state.AutoCureMode.value then 
		--[[if player.tp > 350 and player.max_hp - player.hp > 600 and abil_recasts[186] < latency then
			windower.send_command('input /ja Curing Waltz II <me>')
			]]
	    if player.tp > 500 and player.max_hp - player.hp > 1000 and abil_recasts[187] < latency then
			windower.send_command('input /ja Curing Waltz III <me>')
			tickdelay = os.clock() + 1.1
	
		end
	


		--[[if being_attacked and player.hpp < 85 and abil_recasts[242] < latency then 
			windower.chat.input('/ma "White Wind" <me>')
			tickdelay = os.clock() + 1.1
		elseif being_attacked and player.hpp < 85 and spell_recasts[593] < spell_latency then 
			windower.chat.input('/ma "Magic Fruit" <me>')
			tickdelay = os.clock() + 1.1
		elseif being_attacked and player.hpp < 85 and spell_recasts[578] < spell_latency then 
			windower.chat.input('/ma "Wild Carrot" <me>')
			tickdelay = os.clock() + 1.1
		elseif being_attacked and player.hpp < 85 and spell_recasts[711] < spell_latency then 
			windower.chat.input('/ma "Restoral" <me>')
			tickdelay = os.clock() + 1.1
		elseif being_attacked and player.hpp < 85 and spell_recasts[645] < spell_latency then 
			windower.chat.input('/ma "Exuviation" <me>')
			tickdelay = os.clock() + 1.1
		elseif being_attacked and player.hpp < 85 and spell_recasts[658] < spell_latency then 
			windower.chat.input('/ma "Plenilune Embrace" <me>')
			tickdelay = os.clock() + 1.1
		elseif player.sub_job == 'SCH' and player.hpp < 85  and being_attacked and spell_recasts[4] < spell_latency then 
			windower.chat.input('/ma "Cure IV" <me>')
			tickdelay = os.clock() + 1.1
			
		end]]
	end
end
-------------------------------------------------------------------------------------------------------------------
-- User code that supplements standard library decisions.
-------------------------------------------------------------------------------------------------------------------

-- Called by the default 'update' self-command.
function job_update(cmdParams, eventArgs)
    update_melee_groups()
end


function job_customize_idle_set(idleSet)
	if buffactive['Tactician\'s Roll'] then 
		idleSet = set_combine(idleSet, sets.rollerRing)
	end
    return idleSet
end

function job_customize_melee_set(meleeSet)
    if state.DefenseMode.value ~= 'None' then
        if state.Buff['Saber Dance'] then
            meleeSet = set_combine(meleeSet, sets.buff['Saber Dance'])
        end

    end
    
    return meleeSet
end

-- Function to display the current relevant user state when doing an update.
-- Set eventArgs.handled to true if display was handled, and you don't want the default info shown.
function display_current_job_state(eventArgs)
    local msg = 'Melee'
    
    if state.CombatForm.has_value then
        msg = msg .. ' (' .. state.CombatForm.value .. ')'
    end
    
    msg = msg .. ': '
    
    msg = msg .. state.OffenseMode.value
    if state.HybridMode.value ~= 'Normal' then
        msg = msg .. '/' .. state.HybridMode.value
    end
    msg = msg .. ', WS: ' .. state.WeaponskillMode.value
    
    if state.DefenseMode.value ~= 'None' then
        msg = msg .. ', ' .. 'Defense: ' .. state.DefenseMode.value .. ' (' .. state[state.DefenseMode.value .. 'DefenseMode'].value .. ')'
    end
    
    if state.Kiting.value then
        msg = msg .. ', Kiting'
    end

    msg = msg .. ', ['..state.MainStep.current

    if state.UseAltStep.value == true then
        msg = msg .. '/'..state.AltStep.current
    end
    
    msg = msg .. ']'

    if state.SelectStepTarget.value == true then
        steps = steps..' (Targetted)'
    end

    add_to_chat(122, msg)

    eventArgs.handled = true
end


-------------------------------------------------------------------------------------------------------------------
-- User self-commands.
-------------------------------------------------------------------------------------------------------------------

-- Called for custom player commands.
function job_self_command(commandArgs, eventArgs)
	gearinfo(commandArgs, eventArgs)

    if commandArgs[1] == 'step' then
        local doStep = ''




        if state.UseAltStep.value == true then
            doStep = state[state.CurrentStep.current..'Step'].current
        else
            doStep = state.MainStep.current
        end        
        
        send_command('@input /ja "'..doStep..'" <t>')
        send_command('@input /p '..tostring(doStep)..' on >> <t> << Effect Duration 2.20 min')
		
    end
end

function job_tick()
	if job_buff_change() then return true end
	if job_status_change() then return true end
	if check_dance() then return true end
	if check_buff() then return true end
	return false
end

-----------
-- Called by the 'update' self-command, for common needs.
-- Set eventArgs.handled to true if we don't want automatic equipping of gear.
function job_handle_equipping_gear(playerStatus, eventArgs)
    update_combat_form()
    determine_haste_group()
end
function update_combat_form()  
	if DW == true then  
		state.CombatForm:set('DW')  
	elseif DW == false then  
		state.CombatForm:reset()  
	end  
end
function determine_haste_group()
    classes.CustomMeleeGroups:clear()
    if DW == true then
        if DW_needed <= 1 then
            classes.CustomMeleeGroups:append('MaxHaste')
        elseif DW_needed > 1 and DW_needed <= 9 then
            classes.CustomMeleeGroups:append('HighHaste')
        elseif DW_needed > 9 and DW_needed <= 21 then
            classes.CustomMeleeGroups:append('MidHaste')
        elseif DW_needed > 21 and DW_needed <= 39 then
            classes.CustomMeleeGroups:append('LowHaste')
        elseif DW_needed > 39 then
            classes.CustomMeleeGroups:append('')
        end
    end
end

function gearinfo(commandArgs, eventArgs)
    if commandArgs[1] == 'gearinfo' then
        if type(tonumber(commandArgs[2])) == 'number' then
            if tonumber(commandArgs[2]) ~= DW_needed then
            DW_needed = tonumber(commandArgs[2])
            DW = true
            end
        elseif type(commandArgs[2]) == 'string' then
            if commandArgs[2] == 'false' then
                DW_needed = 0
                DW = false
            end
        end
        if type(tonumber(commandArgs[3])) == 'number' then
            if tonumber(commandArgs[3]) ~= Haste then
                Haste = tonumber(commandArgs[3])
            end
        end
        if not midaction() then
            job_update()
        end
    end
end



-------------------------------------------------------------------------------------------------------------------
-- Utility functions specific to this job.
-------------------------------------------------------------------------------------------------------------------

function update_melee_groups()
	classes.CustomMeleeGroups:clear()

	if state.Buff['Saber Dance'] then
		classes.CustomMeleeGroups:append('Saber')
	end	
	
	if player.equipment.main and player.equipment.main == "Terpsichore" and state.Buff['Aftermath: Lv.3'] then
		classes.CustomMeleeGroups:append('AM')
	end
end

function under3FMs()
	if not buffactive['Finishing Move 3'] and not buffactive['Finishing Move 4'] and not buffactive['Finishing Move 5'] and not buffactive['Finishing Move (6+)'] then
		return true
	else
		return false
	end
end

function check_buff()

	if state.AutoBuffMode.value ~= 'Off' and not data.areas.cities:contains(world.area) then
		local abil_recasts = windower.ffxi.get_ability_recasts()
	
		if not buffactive['Finishing Move 1'] and not buffactive['Finishing Move 2'] and not buffactive['Finishing Move 3'] and not buffactive['Finishing Move 4'] and not buffactive['Finishing Move 5'] and not buffactive['Finishing Move (6+)'] and abil_recasts[223] < latency then
			windower.chat.input('/ja "No Foot Rise" <me>')
			tickdelay = os.clock() + 1.1
			return true
		end
		if player.in_combat and player.sub_job == 'WAR' then
			local abil_recasts = windower.ffxi.get_ability_recasts()

			if not buffactive.Berserk and abil_recasts[1] < latency then
				windower.chat.input('/ja "Berserk" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif not buffactive.Aggressor and abil_recasts[4] < latency then
				windower.chat.input('/ja "Aggressor" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif not buffactive.Warcry and abil_recasts[2] < latency then
				windower.chat.input('/ja "Warcry" <me>')
				tickdelay = os.clock() + 1.1
				return true
			end
		end
		if player.in_combat and player.sub_job == 'WAR' and state.AutoBuffMode.value == 'Attack' then

			local abil_recasts = windower.ffxi.get_ability_recasts()
			
			if not buffactive.Berserk and abil_recasts[1] < latency then
				windower.chat.input('/ja "Berserk" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif buffactive.Defender then
				send_command('@wait .5;cancel Defender')
				tickdelay = os.clock() + 1.1
				return true
			elseif not buffactive.Aggressor and abil_recasts[4] < latency then
				windower.chat.input('/ja "Aggressor" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif not buffactive.Warcry and abil_recasts[2] < latency then
				windower.chat.input('/ja "Warcry" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif not buffactive['Saber Dance'] and abil_recasts[219] < latency then
				windower.chat.input('/ja "Saber Dance" <me>')
				tickdelay = os.clock() + 1.1
			end
		end
		if player.in_combat and player.sub_job == 'WAR' and state.AutoBuffMode.value == 'Defend' then

			local abil_recasts = windower.ffxi.get_ability_recasts()
	
			if buffactive.Berserk then
				send_command('@wait .5;cancel Berserk')
				tickdelay = os.clock() + 1.1
				return true
			elseif not buffactive.Defender and abil_recasts[3] < latency then
				windower.chat.input('/ja "Defender" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif not buffactive.Warcry and abil_recasts[2] < latency then
				windower.chat.input('/ja "Warcry" <me>')
				tickdelay = os.clock() + 1.1
				return true
			elseif not buffactive['Fan Dance'] and abil_recasts[224] < latency then
				windower.chat.input('/ja "Fan Dance" <me>')
				tickdelay = os.clock() + 1.1
			else
				return false
			end
		end
	end
	return false
end

function check_dance()

	if state.DanceStance.value ~= 'None' and not (state.Buff['Saber Dance'] or state.Buff['Fan Dance']) and player.in_combat then
		
		local abil_recasts = windower.ffxi.get_ability_recasts()
		
		if state.DanceStance.value == 'Saber Dance' and abil_recasts[219] < latency then
			windower.chat.input('/ja "Saber Dance" <me>')
			tickdelay = os.clock() + 1.1
			return true
		elseif state.DanceStance.value == 'Fan Dance' and abil_recasts[224] < latency then
			windower.chat.input('/ja "Fan Dance" <me>')
			tickdelay = os.clock() + 1.1
			return true
		else
			return false
		end
	end

	return false
end

function step_cost()
	local cost = 100
	
	if player.equipment.main == 'Setan Kober' then cost = cost - 40 end
	if player.equipment.sub == 'Setan Kober' then cost = cost - 40 end
	if state.DefenseMode.value == 'None' then cost = cost - step_feet_reduction end
	
	return cost
end