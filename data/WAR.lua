--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- __________.__                                ________                          __               .__.__  __      __  .__    .__           _____.__.__              
-- \______   |  |   ____ _____    ______ ____   \______ \   ____     ____   _____/  |_    ____   __| _|___/  |_  _/  |_|  |__ |__| ______ _/ ____|__|  |   ____      
--  |     ___|  | _/ __ \\__  \  /  ____/ __ \   |    |  \ /  _ \   /    \ /  _ \   __\ _/ __ \ / __ ||  \   __\ \   __|  |  \|  |/  ___/ \   __\|  |  | _/ __ \     
--  |    |   |  |_\  ___/ / __ \_\___ \\  ___/   |    `   (  <_> ) |   |  (  <_> |  |   \  ___// /_/ ||  ||  |    |  | |   Y  |  |\___ \   |  |  |  |  |_\  ___/     
--  |____|   |____/\___  (____  /____  >\___  > /_______  /\____/  |___|  /\____/|__|    \___  \____ ||__||__|    |__| |___|  |__/____  >  |__|  |__|____/\___  > /\ 
--                     \/     \/     \/     \/          \/              \/                   \/     \/                      \/        \/                      \/  \/ 
--
--	Please do not edit this file!							Please do not edit this file!							Please do not edit this file!
--
--	Editing this file will cause you to be unable to use Github Desktop to update!
--
--	Any changes you wish to make in this file you should be able to make by overloading. That is Re-Defining the same variables or functions in another file, by copying and
--	pasting them to a file that is loaded after the original file, all of my library files, and then job files are loaded first.
--	The last files to load are the ones unique to you. User-Globals, Charactername-Globals, Charactername_Job_Gear, in that order, so these changes will take precedence.
--
--	You may wish to "hook" into existing functions, to add functionality without losing access to updates or fixes I make, for example, instead of copying and editing
--	status_change(), you can instead use the function user_status_change() in the same manner, which is called by status_change() if it exists, most of the important 
--  gearswap functions work like this in my files, and if it's unique to a specific job, user_job_status_change() would be appropriate instead.
--
--  Variables and tables can be easily redefined just by defining them in one of the later loaded files: autofood = 'Miso Ramen' for example.
--  States can be redefined as well: state.HybridMode:options('Normal','PDT') though most of these are already redefined in the gear files for editing there.
--	Commands can be added easily with: user_self_command(commandArgs, eventArgs) or user_job_self_command(commandArgs, eventArgs)
--
--	If you're not sure where is appropriate to copy and paste variables, tables and functions to make changes or add them:
--		User-Globals.lua - 			This file loads with all characters, all jobs, so it's ideal for settings and rules you want to be the same no matter what.
--		Charactername-Globals.lua -	This file loads with one character, all jobs, so it's ideal for gear settings that are usable on all jobs, but unique to this character.
--		Charactername_Job_Gear.lua-	This file loads only on one character, one job, so it's ideal for things that are specific only to that job and character.
--
--
--	If you still need help, feel free to contact me on discord or ask in my chat for help: https://discord.gg/ug6xtvQ
--  !Please do NOT message me in game about anything third party related, though you're welcome to message me there and ask me to talk on another medium.
--
--  Please do not edit this file!							Please do not edit this file!							Please do not edit this file!
-- __________.__                                ________                          __               .__.__  __      __  .__    .__           _____.__.__              
-- \______   |  |   ____ _____    ______ ____   \______ \   ____     ____   _____/  |_    ____   __| _|___/  |_  _/  |_|  |__ |__| ______ _/ ____|__|  |   ____      
--  |     ___|  | _/ __ \\__  \  /  ____/ __ \   |    |  \ /  _ \   /    \ /  _ \   __\ _/ __ \ / __ ||  \   __\ \   __|  |  \|  |/  ___/ \   __\|  |  | _/ __ \     
--  |    |   |  |_\  ___/ / __ \_\___ \\  ___/   |    `   (  <_> ) |   |  (  <_> |  |   \  ___// /_/ ||  ||  |    |  | |   Y  |  |\___ \   |  |  |  |  |_\  ___/     
--  |____|   |____/\___  (____  /____  >\___  > /_______  /\____/  |___|  /\____/|__|    \___  \____ ||__||__|    |__| |___|  |__/____  >  |__|  |__|____/\___  > /\ 
--                     \/     \/     \/     \/          \/              \/                   \/     \/                      \/        \/                      \/  \/ 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
-- Setup functions for this job.  Generally should not be modified.
-------------------------------------------------------------------------------------------------------------------

-- Initialization function for this job file.
function get_sets()
    -- Load and initialize the include file.
    include('Sel-Include.lua')
	
	organizer_items = {
		"Airmid's Gorget",
		"Tumult's Blood",
		"Sarama's Hide",
		"Hidhaegg's Scale",
		"Sovereign's Hide",
		"Grape Daifuku",
		"Soy Ramen",
		"G. Curry Bun +1",
		"Pukatrice Egg",
		"Moogle Amp.",
		"Popo. con Queso",
		"Pear Crepe",
		"Om. Sandwich",
		"Red Curry Bun",
		"Gyudon",
		"Reraiser",
		"Hi-Reraiser",
		"Vile Elixir",
		"Vile Elixir +1",
		"Miso Ramen",
		"Carbonara",
		"Silent Oil",
		"Salt Ramen",
		"Panacea",
		"Sublime Sushi",
		"Sublime Sushi 1+",
		"Prism Powder",
		"Antacid",
		"Icarus Wing",
		"Warp Cudgel",
		"Holy Water",
		"Sanjaku-Tenugui",
		"Shinobi-Tabi",
		"Shihei",
		"Remedy",
		"Emporox's Ring",
		"Red Curry Bun",
		"Instant Reraise",
		"Black Curry Bun",
		"Rolan. Daifuku",
		"Reraise Earring",}
end

    -- Setup vars that are user-independent.
function job_setup()
    set_dual_wield()

	state.Buff['Brazen Rush'] = buffactive['Brazen Rush'] or false
	state.Buff.Berserk = buffactive['Berserk'] or false
	state.Buff.Aggressor = buffactive['Aggressor'] or false
	state.Buff["Warrior's Charge"] = buffactive["Warrior's Charge"] or false
	state.Buff['Mighty Strikes'] = buffactive['Mighty Strikes']  or false
	state.Buff.Warcry = buffactive['Warcry'] or false
	state.Buff['Blood Rage'] = buffactive['Blood Rage'] or false
	state.Buff.Retaliation = buffactive['Retaliation'] or false
	state.Buff.Restraint = buffactive['Restraint'] or false
    state.Buff['Aftermath'] = buffactive['Aftermath'] or false
	state.Buff['Aftermath: Lv.3'] = buffactive['Aftermath: Lv.3'] or false
	state.Buff['Third Eye'] = buffactive['Third Eye'] or false
    state.Buff.Hasso = buffactive.Hasso or false
    state.Buff.Seigan = buffactive.Seigan or false
	state.Buff['Sneak Attack'] = buffactive['Sneak Attack'] or false
	state.Buff.Phalanx = buffactive['Phalanx'] or false
	state.WeaponLock = M(false, 'Weapon Lock')
    state.RP = M(false, "Reinforcement Points Mode")
	state.AutoReraiseMode = M(true, 'Auto Reraise Mode')
	state.AutoTomahawkMode = M(false, 'AutoTomahawkMode')

	state.Stance = M{['description']='Stance','Hasso','Seigan','None'}
	state.ConquerorMode = M{['description']='Conqueror Mode','Never','500','1000','Always'}

    absorbs = S{'Absorb-STR', 'Absorb-DEX', 'Absorb-VIT', 'Absorb-AGI', 'Absorb-INT', 'Absorb-MND', 'Absorb-CHR', 'Absorb-Attri', 'Absorb-MaxAcc', 'Absorb-TP'}

	autows = 'Savage Blade'
	autofood = 'Soy Ramen'
	
	init_job_states({"Capacity","AutoRuneMode","AutoWSMode","AutoShadowMode","AutoFoodMode","AutoStunMode","AutoDefenseMode","AutoMedicineMode","AutoReraiseMode"},{"AutoTrustMode","AutoBuffMode","AutoSambaMode","Weapons","OffenseMode","WeaponskillMode","Stance","IdleMode","Passive","RuneElement","TreasureMode",})
end
	
-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for standard casting events.
-------------------------------------------------------------------------------------------------------------------
-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
-- Set eventArgs.useMidcastGear to true if we want midcast gear equipped on precast.

function job_filtered_action(spell, eventArgs)
	if spell.type == 'WeaponSkill' then
		local available_ws = S(windower.ffxi.get_abilities().weapon_skills)
		-- WS 112 is Double Thrust, meaning a Spear is equipped.
		if available_ws:contains(48) then
            if spell.english == "Upheaval" then
				windower.chat.input('/ws "Resolution" '..spell.target.raw)
                cancel_spell()
				eventArgs.cancel = true
            elseif spell.english == "Ukko's Fury" then
                send_command('@input /ws "Ground Strike" '..spell.target.raw)
                cancel_spell()
				eventArgs.cancel = true
            end
        end
	end

end

function job_precast(spell, spellMap, eventArgs)
	if spell.english == 'Warcry' then
        if buffactive['Warcry'] then
            cancel_spell()
            add_to_chat(123, spell.name..' Canceled: Warcry its up [active]')
        end
    end
	if spell.type == 'WeaponSkill' then
		if state.AutoBuffMode.value ~= 'Off' then
			local abil_recasts = windower.ffxi.get_ability_recasts()
			if player.tp < 2250 and not state.Buff['Blood Rage'] and not state.Buff.Warcry and abil_recasts[2] < latency then
				eventArgs.cancel = true
				windower.chat.input('/ja "Warcry" <me>')
				windower.chat.input:schedule(1.1,'/ws "'..spell.english..'" '..spell.target.raw..'')
				add_tick_delay(1.1)
				return
			elseif state.Buff['SJ Restriction'] then
				return
			elseif player.sub_job == 'SAM' and player.tp > 1850 and abil_recasts[140] < latency then
				eventArgs.cancel = true
				windower.chat.input('/ja "Sekkanoki" <me>')
				windower.chat.input:schedule(1.1,'/ws "'..spell.english..'" '..spell.target.raw..'')
				add_tick_delay(1.1)
				return
			elseif player.sub_job == 'SAM' and abil_recasts[134] < latency then
				eventArgs.cancel = true
				windower.chat.input('/ja "Meditate" <me>')
				windower.chat.input:schedule(1.1,'/ws "'..spell.english..'" '..spell.target.raw..'')
				add_tick_delay(1.1)
				return
			end
		end
	elseif spell.type == "JobAbility" then
		if spell.english == 'Berserk' then
			if state.ConquerorMode.value == 'Always' or (state.ConquerorMode.value ~= 'Never' and tonumber(state.ConquerorMode.value) > player.tp) then
				internal_enable_set("Weapons") 
			end
		end
	end

end
-- Modify the default idle set after it was constructed.
function job_customize_idle_set(idleSet)
	if buffactive['Tactician\'s Roll'] then 
		idleSet = set_combine(idleSet, sets.rollerRing)
	end
    if state.RP.current == 'on' then
        equip(sets.RP)
        disable('neck')
    else
        enable('neck')
    end
	if state.AutoReraiseMode.value and not buffactive['Reraise'] and (player.hpp < 5 or buffactive['doom'] or buffactive['weakness']) then
	    idleSet = set_combine(idleSet, sets.Reraise)
    end
	if player.status == 'Resting' and state.AutoReraiseMode.value then
        idleSet = set_combine(idleSet, sets.Reraise)
    end
    return idleSet
end
-- Modify the default melee set after it was constructed.
function job_customize_melee_set(meleeSet)

	if not state.OffenseMode.value:contains('Acc') and state.HybridMode.value == 'Normal' and buffactive['Retaliation'] then
		meleeSet = set_combine(meleeSet, sets.buff.Retaliation)
	end
	
	if not state.OffenseMode.value:contains('Acc') and state.HybridMode.value == 'Normal' and buffactive['Restraint'] then
		meleeSet = set_combine(meleeSet, sets.buff.Restraint)
	end
	if state.RP.current == 'on' then
        equip(sets.RP)
        disable('neck')
    else
        enable('neck')
    end
    if state.TreasureMode.value == 'Fulltime' then
        meleeSet = set_combine(meleeSet, sets.TreasureHunter)
    end
	if state.AutoReraiseMode.value and not buffactive['Reraise'] and (player.hpp < 5 or buffactive['doom'] or buffactive['weakness']) then
	    meleeSet = set_combine(meleeSet, sets.Reraise)
    end
    return meleeSet
end
function job_customize_defense_set(defenseSet)
	if state.AutoReraiseMode.value and not buffactive['Reraise'] and (player.hpp < 5 or buffactive['doom'] or buffactive['weakness']) then
		defenseSet = set_combine(defenseSet, sets.Reraise)
	end
    return defenseSet
end
function job_customize_passive_set(baseSet)
	if state.AutoReraiseMode.value and not buffactive['Reraise'] and (player.hpp < 5 or buffactive['doom'] or buffactive['weakness']) then
		baseSet = set_combine(baseSet, sets.Reraise)
	end
    return baseSet
end


-- Run after the general precast() is done.
function job_post_precast(spell, spellMap, eventArgs)

	if spell.type == 'WeaponSkill' then

		local WSset = standardize_set(get_precast_set(spell, spellMap))
		local wsacc = check_ws_acc()
		
		if (WSset.ear1 == "Moonshade Earring" or WSset.ear2 == "Moonshade Earring") then
			-- Replace Moonshade Earring if we're at cap TP
			if get_effective_player_tp(spell, WSset) >= 3000 then
				if wsacc:contains('Acc') and not buffactive['Sneak Attack'] and sets.AccMaxTP then
					local AccMaxTPset = standardize_set(sets.AccMaxTP)

					if (AccMaxTPset.ear1:startswith("Lugra Earring") or AccMaxTPset.ear2:startswith("Lugra Earring")) and not classes.DuskToDawn and sets.AccDayMaxTPWSEars then
						equip(sets.AccDayMaxTPWSEars[spell.english] or sets.AccDayMaxTPWSEars)
					else
						equip(sets.AccMaxTP[spell.english] or sets.AccMaxTP)
					end
				elseif sets.MaxTP then
					local MaxTPset = standardize_set(sets.MaxTP)
					if (MaxTPset.ear1:startswith("Lugra Earring") or MaxTPset.ear2:startswith("Lugra Earring")) and not classes.DuskToDawn and sets.DayMaxTPWSEars then
						equip(sets.DayMaxTPWSEars[spell.english] or sets.DayMaxTPWSEars)
					else
						equip(sets.MaxTP[spell.english] or sets.MaxTP)
					end
				else
				end
			else
				if wsacc:contains('Acc') and not buffactive['Sneak Attack'] and (WSset.ear1:startswith("Lugra Earring") or WSset.ear2:startswith("Lugra Earring")) and not classes.DuskToDawn and sets.AccDayWSEars then
					equip(sets.AccDayWSEars[spell.english] or sets.AccDayWSEars)
				elseif (WSset.ear1:startswith("Lugra Earring") or WSset.ear2:startswith("Lugra Earring")) and not classes.DuskToDawn and sets.DayWSEars then
					equip(sets.DayWSEars[spell.english] or sets.DayWSEars)
				end
			end
		elseif (WSset.ear1:startswith("Lugra Earring") or WSset.ear2:startswith("Lugra Earring")) and not classes.DuskToDawn then
			if wsacc:contains('Acc') and not buffactive['Sneak Attack'] and sets.AccDayWSEars then
				equip(sets.AccDayWSEars[spell.english] or sets.AccDayWSEars)
			elseif sets.DayWSEars then
				equip(sets.DayWSEars[spell.english] or sets.DayWSEars)
			end
		end
		
		if wsacc:contains('Acc') and not buffactive['Sneak Attack'] then
			if state.Buff.Charge and state.Buff['Mighty Strikes'] and sets.ACCWSMightyCharge then
				equip(sets.ACCWSMightyCharge)
			elseif state.Buff.Charge and sets.ACCWSCharge then
				equip(sets.ACCWSCharge)
			elseif state.Buff['Mighty Strikes'] and sets.ACCWSMighty then
				equip(sets.AccWSMighty)
			end
		else
			if state.Buff.Charge and state.Buff['Mighty Strikes'] and sets.WSMightyCharge then
				equip(sets.WSMightyCharge)
			elseif state.Buff.Charge and sets.WSCharge then
				equip(sets.WSCharge)
			elseif state.Buff['Mighty Strikes'] and sets.WSMighty then
				equip(sets.WSMighty)
			end
		end
	end


	--[[ 
	if spell.type == 'WeaponSkill' then
        if state.WeaponskillMode.value == 'Proc' then
            equip()
        end
	end
	]]
end

function job_tick()
	if check_hasso() then return true end
	if check_buff() then return true end
	return false
end

-- Called by the 'update' self-command.
function job_update(cmdParams, eventArgs)

    update_melee_groups()
	if player.sub_job ~= 'SAM' and state.Stance.value ~= "None" then
		state.Stance:set("None")
	end
end

function job_aftercast(spell, spellMap, eventArgs)
	if spell.type == "JobAbility" then
		if spell.english == 'Berserk' then
			if state.ConquerorMode.value ~= 'Never' and not state.UnlockWeapons.value and state.Weapons.value ~= 'None' then
				equip_weaponset()
			end
		end
	elseif spell.english == 'Warcry' then
		if not spell.interrupted then
			lastwarcry = player.name
		end
	end
	handle_equipping_gear(player.status)

end
function job_handle_equipping_gear(playerStatus, eventArgs)
end

function job_buff_change(buff, gain)
	-- if state.AutoReraiseMode.value and not buffactive['Reraise']then
	-- 	if buffactive['weakness'] then
	-- 		equip(sets.Reraise)
	-- 		disable('body','head')
	-- 	else
	-- 		enable('body','head')
	-- 	end
	-- end
	if buff == "Mighty Strikes" then
        if gain then  			
            send_command('input /p "Mighty Strikes" [ON]')		
        else	
            send_command('input /p "Mighty Strikes" [OFF]')
        end
    end
	if buff == "Warcry" then
        if gain then  			
            send_command('input /p "Warcry" [ON]')		
        else	
            send_command('input /p "Warcry" [OFF]')
        end
    end

    if buff == "Blood Rage" then
        if gain then  			
            send_command('input /p "Blood Rage" [ON]')		
        else	
            send_command('input /p "Blood Rage" [OFF]')
        end
    end    
    if buff == "petrification" then
        if gain then    
            equip(sets.defense.PDT)
            -- send_command('input /p Petrification, please Stona.')		
        else
            handle_equipping_gear(player.status)
        end
    end
    if buff == "Charm" then
        if gain then  			
        --    send_command('input /p Charmd, please Sleep me.')		
        else	
        --    send_command('input /p '..player.name..' is no longer Charmed, please wake me up!')
        end
    end
	if state.NeverDieMode.value or state.AutoCureMode.value then 

		if buffactive['poison'] and world.area:contains('Sortie') and (player.sub_job == 'SCH' or player.sub_job == 'WHM') and spell_recasts[14] < spell_latency then 
			windower.chat.input('/ma "Poisona" <me>')
			tickdelay = os.clock() + 1.1
			
		end
	end
	if state.AutoMedicineMode.value == true then
		if buff == "Defense Down" then
			if gain then  			
				send_command('input /item "Panacea" <me>')
			end
		elseif buff == "Magic Def. Down" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Max HP Down" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Evasion Down" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Magic Evasion Down" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Dia" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end  
		elseif buff == "Bio" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Bind" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "slow" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "weight" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Attack Down" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "Accuracy Down" then
			if gain then  			
				send_command('@input /item "panacea" <me>')
			end
		end
	
		if buff == "VIT Down" then
			if gain then
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "INT Down" then
			if gain then
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "MND Down" then
			if gain then
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "STR Down" then
			if gain then
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "AGI Down" then
			if gain then
				send_command('@input /item "panacea" <me>')
			end
		elseif buff == "poison" then
			if gain then  
				send_command('input /item "remedy" <me>')
			end
		end
		if not midaction() then
			job_update()
		end
	end
	update_melee_groups()
end

function update_melee_groups()
    if player then
		classes.CustomMeleeGroups:clear()
		
		if data.areas.adoulin:contains(world.area) and buffactive.Ionis then
			classes.CustomMeleeGroups:append('Adoulin')
		end
		
		if state.Buff['Brazen Rush'] or state.Buff["Warrior's Charge"] then
			classes.CustomMeleeGroups:append('Charge')
		end
		
		if state.Buff['Mighty Strikes'] then
			classes.CustomMeleeGroups:append('Mighty')
		end
		
		if (player.equipment.main == "Conqueror" and buffactive['Aftermath: Lv.3']) or ((player.equipment.main == "Bravura" or player.equipment.main == "Ragnarok") and state.Buff['Aftermath']) then
				classes.CustomMeleeGroups:append('AM')
		end
	end

end

function check_hasso()
	if player.sub_job == 'SAM' and player.status == 'Engaged' and not (state.Stance.value == 'None' or state.Buff.Hasso or state.Buff.Seigan or state.Buff['SJ Restriction'] or main_weapon_is_one_handed() or silent_check_amnesia()) then
		
		local abil_recasts = windower.ffxi.get_ability_recasts()
		
		if state.Stance.value == 'Hasso' and abil_recasts[138] < latency then
			windower.chat.input('/ja "Hasso" <me>')
			tickdelay = os.clock() + 1.1
			return true
		elseif state.Stance.value == 'Seigan' and abil_recasts[139] < latency then
			windower.chat.input('/ja "Seigan" <me>')
			tickdelay = os.clock() + 1.1
			return true
		else
			return false
		end
	end

	return false
end

buff_activation_time = nil
last_auto_buff_mode = nil

function check_buff()
	if last_auto_buff_mode ~= state.AutoBuffMode.value then
        buff_activation_time = os.clock()
        last_auto_buff_mode = state.AutoBuffMode.value
        return false
    end

	--Does not work until seconds add after the last change
	if not buff_activation_time or os.clock() - buff_activation_time < 3 then
        return false
    end
	
		
	if state.AutoBuffMode.value == 'Auto' and player.in_combat then
		local abil_recasts = windower.ffxi.get_ability_recasts()

		if not buffactive.Restraint and abil_recasts[9] < latency then
			windower.chat.input('/ja "Restraint" <me>')
			tickdelay = os.clock() + 1.1
			return true
		elseif buffactive.Defender then
			send_command('@wait .5;cancel Defender')
			tickdelay = os.clock() + 1.1
			return true
		elseif not buffactive['Blood Rage'] and abil_recasts[11] < latency then
			windower.chat.input('/ja "Blood Rage" <me>')
			tickdelay = os.clock() + 1.1
			return true
		elseif not buffactive.Berserk and abil_recasts[1] < latency then
			windower.chat.input('/ja "Berserk" <me>')
			tickdelay = os.clock() + 1.1
			return true
		elseif not buffactive.Aggressor and abil_recasts[4] < latency then
			windower.chat.input('/ja "Aggressor" <me>')
			tickdelay = os.clock() + 1.1
			return true
		elseif player.sub_job == 'WAR' and not buffactive.Warcry and abil_recasts[2] < latency then
			windower.chat.input('/ja "Warcry" <me>')
			tickdelay = os.clock() + 1.1
			return true
		elseif abil_recasts[7] < latency and state.AutoTomahawkMode.value then
			windower.chat.input('/ja "Tomahawk" <t>')
			tickdelay = os.clock() + 1.1
			return true
		else
			return false
		end
	end
	if state.AutoBuffMode.value == 'Full' and player.in_combat then

		local abil_recasts = windower.ffxi.get_ability_recasts()

		if not buffactive.Restraint and abil_recasts[9] < latency then
			windower.chat.input('/ja "Restraint" <me>')
			tickdelay = os.clock() + 1.1
			return true
		elseif buffactive.Defender then
			send_command('@wait .5;cancel Defender')
			tickdelay = os.clock() + 1.1
			return true
		elseif not buffactive['Blood Rage'] and abil_recasts[11] < latency then
			windower.chat.input('/ja "Blood Rage" <me>')
			tickdelay = os.clock() + 1.1
			return true
		elseif not buffactive.Berserk and abil_recasts[1] < latency then
			windower.chat.input('/ja "Berserk" <me>')
			tickdelay = os.clock() + 1.1
			return true
		elseif not buffactive.Aggressor and abil_recasts[4] < latency then
			windower.chat.input('/ja "Aggressor" <me>')
			tickdelay = os.clock() + 1.1
			return true
		elseif not buffactive.Warcry and abil_recasts[2] < latency then
			windower.chat.input('/ja "Warcry" <me>')
			tickdelay = os.clock() + 1.1
			return true
		elseif not buffactive['Mighty Strikes'] and abil_recasts[254] < latency then
			windower.chat.input('/ja "Mighty Strikes" <me>')
			tickdelay = os.clock() + 1.1
			return true
		elseif not buffactive['Brazen Rush'] and abil_recasts[254] < latency then
			windower.chat.input('/ja "Brazen Rush" <me>')
			tickdelay = os.clock() + 1.1
			return true
		elseif abil_recasts[7] < latency and state.AutoTomahawkMode.value then
			windower.chat.input('/ja "Tomahawk" <t>')
			tickdelay = os.clock() + 1.1
			return true
		end
	end
	if state.AutoBuffMode.value == 'Defend' and player.in_combat then

		local abil_recasts = windower.ffxi.get_ability_recasts()

		if buffactive.Berserk then
			send_command('@wait .5;cancel Berserk')
			tickdelay = os.clock() + 1.1
			return true
		elseif not buffactive.Defender and abil_recasts[3] < latency then
			windower.chat.input('/ja "Defender" <me>')
			tickdelay = os.clock() + 1.1
			return true
		elseif not buffactive.Warcry and abil_recasts[2] < latency then
			windower.chat.input('/ja "Warcry" <me>')
			tickdelay = os.clock() + 1.1
			return true
		elseif abil_recasts[7] < latency and state.AutoTomahawkMode.value then
			windower.chat.input('/ja "Tomahawk" <t>')
			tickdelay = os.clock() + 1.1
			return true
		else
			return false
		end
	end
	

		--[[if not buffactive.Retaliation and abil_recasts[8] < latency then
			windower.chat.input('/ja "Retaliation" <me>')
			tickdelay = os.clock() + 1.1
			return true	]]	
		
	return false
end

windower.register_event('incoming text',function(org)     

	--abyssea stagger
	if string.find(org, "staggers") then

		windower.send_command('input /p Stagger! <call21>!') -- code add by (Aragan@Asura)
		send_command('gs c Weapons DualMalevo;gs c set WeaponskillMode Match')--;gc c OffenseMode CRIT;GS C AotuWSMode False

	end
end)

-- Handle notifications of general user state change.
function job_state_change(stateField, newValue, oldValue)
    if state.WeaponLock.value == true then
        disable('main','sub')
    else
        enable('main','sub')
    end
end
function job_status_change(newStatus, oldStatus, eventArgs)
	handle_equipping_gear(player.status)
    if player.status == 'Resting' and state.AutoReraiseMode.value then
        idleSet = set_combine(idleSet, sets.Reraise)
    end
 
 end
function check_weaponset()
	--[[equip(sets[state.Shield.current])
    if (player.sub_job ~= 'NIN' and player.sub_job ~= 'DNC') then
        equip(sets.DefaultShield)
    elseif player.sub_job == 'NIN' and player.sub_job_level < 10 or player.sub_job == 'DNC' and player.sub_job_level < 20 then
        equip(sets.DefaultShield)
    end]]

end

-- windower.register_event('hpp change', -- code add from Aragan Asura
-- function(new_hpp,old_hpp)
--     if state.AutoReraiseMode.value and new_hpp < 5 then
--         equip(sets.Reraise)
--     end
-- end
-- )

-- zombie_last_check = 0

-- windower.register_event('prerender', function()
--     local now = os.clock()
--     if now - zombie_last_check > 1 then -- كل 1 ثانية
--         zombie_last_check = now

-- 		if state.AutoReraiseMode.value and not buffactive['Reraise'] and (player.hpp < 5 or buffactive['doom']) then
--             send_command('gs c update') -- يجبر GearSwap يعيد فحص الشروط وتطبيق Zombie gear
--         end
--     end
-- end)

buff_spell_lists = {
	Defend = {--Options for When are: Always, Engaged, Idle, OutOfCombat, Combat
		{Name='Phalanx',			Buff='Phalanx',			SpellID=106,	When='Always'},
	},
	
}
